---
editor: 
  markdown: 
    wrap: 72
number-depth: 3
code-annotations: hover
---

# Geospatial cleaning {#sec-geospatial-cleaning}

Geospatial observational data provides essential information about
species' locations over time and space, and can be used with ecological data 
to understand interactions of species with their environment. However, 
geospatial data can be difficult to work with. Seemingly minor issues can have 
large impacts on the data's validity.

**Outliers**—points located at large-enough distances from the majority
of the species' observations to skew an overall distribution—are a major
challenge for geospatial data cleaning. Identifying outliers can be
difficult because it's not always clear whether an outlier is a true
outlier or a data error. Data errors can result from species
misidenfitication or incorrect geo-referencing. Other accidental data
errors like reversing numeric symbols, mistyping a coordinate number or
entering the wrong location can have dramatic consequences on a species'
reported location as well. For some species with smaller ranges, these
errors will be easier to find. For species with larger ranges or
analyses with many species over a larger area, these errors will be much
more difficult to identify.

Every dataset has its own combination of issues that will require
bespoke cleaning to address them. It is important to clean geospatial
data effectively if they are to be useful, as geospatial errors can lead
to unexpected results of species range estimates and analytic output.

In this chapter, we show some common issues with coordinate data and how
to correct or remove records that appear suspicious.

### Prerequisites

In this chapter we'll use several datasets:

  * MacDonnell's desert fuschia (*Eremophila macdonnellii*) occurrence records from the ALA
  * Red-eyed tree frog (*Litoria chloris*) occurrence records in 2013 from the ALA
  * Kowari (*Dasyuroides byrnei*, a native mouse) occurrence records from the ALA
  * *Acacia* occurrence records from the ALA
  * Common brown butterfly (*Heteronympha merope*) occurrence records in 2014 from the ALA
  * Bitter pea (*Daviesia ulicifolia*) occurrence records from the ALA

```{r prereq-internal}
#| echo: false
#| warning: false
#| message: false
# packages
library(galah)
library(ggplot2)
library(dplyr)
library(sf)
library(ozmaps)
library(tidyr)
library(stringr)
galah_config(email = Sys.getenv("ALA_EMAIL"),
             verbose = FALSE)

# get DOIs for chapter
doi_table <- here::here("data", "galah-dois", "doi_table") |>
  arrow::open_dataset() |>
  filter(chapter == "Geospatial cleaning") |>
  collect()

# extract dois
doi_desert_plant <- doi_table |> filter(name == "desert_plant") |> pull(doi)
doi_frogs <- doi_table |> filter(name == "frogs") |> pull(doi)
doi_native_mice <- doi_table |> filter(name == "native_mice") |> pull(doi)
doi_acacias <- doi_table |> filter(name == "acacias") |> pull(doi)
doi_butterflies <- doi_table |> filter(name == "butterflies") |> pull(doi)
doi_bitter_peas <- doi_table |> filter(name == "bitter_peas") |> pull(doi)

# download
desert_plant <- galah_call() |>
  filter(doi == doi_desert_plant) |>
  atlas_occurrences()
frogs <- galah_call() |>
  filter(doi == doi_frogs) |>
  atlas_occurrences()
native_mice <- galah_call() |>
  filter(doi == doi_native_mice) |>
  atlas_occurrences()
acacias <- galah_call() |>
  filter(doi == doi_acacias) |>
  atlas_occurrences()
butterflies <- galah_call() |>
  filter(doi == doi_butterflies) |>
  atlas_occurrences()
bitter_peas <- galah_call() |>
  filter(doi == doi_bitter_peas) |>
  atlas_occurrences()
```

```{r prereq-external}
#| echo: false
test <- glue::glue(
"
# packages
library(galah)
library(ggplot2)
library(dplyr)
library(sf)
library(ozmaps)
library(tidyr)
library(stringr)
galah_config(email = \"your-email-here\") # ALA-registered email

desert_plant <- galah_call() |>
  filter(doi == \"{doi_desert_plant}\") |>
  atlas_occurrences()

frogs <- galah_call() |>
  filter(doi == \"{doi_frogs}\") |>
  atlas_occurrences()

native_mice <- galah_call() |>
  filter(doi == \"{doi_native_mice}\") |>
  atlas_occurrences()

acacias <- galah_call() |>
  filter(doi == \"{doi_acacias}\") |>
  atlas_occurrences()

butterflies <- galah_call() |>
  filter(doi == \"{doi_butterflies}\") |>
  atlas_occurrences()

bitter_peas <- galah_call() |>
  filter(doi == \"{doi_bitter_peas}\") |>
  atlas_occurrences()
"
)
```

```{r prereq-printed}
#| eval: false
#| code: !expr test
#| echo: true
```

::: aside
<img src="https://ala-images.s3.ap-southeast-2.amazonaws.com/store/f/5/e/7/2ce6ee0a-f662-4e93-88a4-61e7dcb07e5f/original" class="rounded"/></img>

::: figure-caption
[*Eremophila macdonnellii* aka MacDonnell's desert fuschia.<br>Photo by
M. Fagg CC-BY 3.0
(Au)](https://biocache.ala.org.au/occurrences/fcf8a190-5e7b-45b9-9f7d-402dd3e230fd)
:::

<img src="https://ala-images.s3.ap-southeast-2.amazonaws.com/store/3/1/a/b/987382fa-8168-4249-870b-4e043824ba13/original" class="rounded"/></img>

::: figure-caption
[*Litoria chloris* standing on leaves.<br>Photo by Reiner Richter
CC-BY](https://biocache.ala.org.au/occurrences/e0d5d604-e148-408e-8dbf-984f42701b4c)
:::

<img src="https://ala-images.s3.ap-southeast-2.amazonaws.com/store/0/3/1/9/6015cc38-f4c3-47d3-b7c5-1adf563e9130/original" class="rounded"/></img>

::: figure-caption
[*Dasyuroides byrnei* pair captured in red light.<br>Photo by Ged Tranter 
CC-BY](https://biocache.ala.org.au/occurrences/fa0c5c98-007a-4af9-b6db-0c8dcacaeaf5)
:::

<img src="https://ala-images.s3.ap-southeast-2.amazonaws.com/store/0/5/5/0/795c14ba-3ee5-4af6-a3a5-d78c04e50550/original" class="rounded"/></img>

::: figure-caption
[*Acacia aneura* flowering.<br>Photo by rachbaxter CC-BY-NC 4.0
(Int)](https://biocache.ala.org.au/occurrences/9081b056-df23-495c-806e-fc5b265afb3a)
:::

<img src="https://ala-images.s3.ap-southeast-2.amazonaws.com/store/5/c/2/5/5ad0125f-8684-4e66-b5bf-cd0b0f8e52c5/original" class="rounded"/></img>

::: figure-caption
[*Heteronympha merope merope* resting on leaf litter.<br>Photo by
Mononymous CC-BY-NC 4.0
(Int)](https://biocache.ala.org.au/occurrences/6f6f172b-5d8e-4879-b77c-3517e08819e8)
:::

<img src="https://ala-images.s3.ap-southeast-2.amazonaws.com/store/a/5/d/3/4407a084-d780-4972-84e6-2fb297793d5a/original" class="rounded"/></img>

::: figure-caption
[*Daviesia ulicifolia ruscifolia* flowering.<br>Photo by Warren
Tomlinson CC-BY-NC 4.0
(Int)](https://biocache.ala.org.au/occurrences/fde7691c-37f3-40a0-a2b7-628b0d0240c7)
:::
:::

<!-- Queries -->
:::{.callout-note collapse="true" appearance="minimal"}

#### Original download queries

**Note:** You don't need to run this code block to read this chapter. It can, however, be useful to see the original download query. This code will download the latest data from the ALA, which you are welcome to use instead, though the data might not exactly reproduce results in this chapter.

```{r prereq-orig-query}
#| eval: false
library(galah)
galah_config(email = "your-email-here")

desert_plant <- galah_call() |>
  identify("Eremophila macdonnellii") |>
  select(group = "basic", 
         PRESUMED_SWAPPED_COORDINATE) |> # add assertion column
  atlas_occurrences() # <1>

frogs <- galah_call() |>
  identify("Litoria chloris") |>
  filter(year == 2013) |>
  select(group = "basic",
         countryCode, locality,
         family, genus, species, 
         cl22, eventDate) |>
  atlas_occurrences() # <1>

native_mice <- galah_call() |>
  identify("Dasyuroides byrnei") |>
  select(scientificName, decimalLongitude, decimalLatitude,
         eventDate,
         country, countryCode, locality, 
         COUNTRY_COORDINATE_MISMATCH,
         group = "assertions") |>
  atlas_occurrences() # <1>

acacias <- galah_call() |>
  identify("acacia aneura") |>
  select(group = "basic",
         ZERO_COORDINATE, # add assertion column
         countryCode, locality) |>
  atlas_occurrences() # <1>

butterflies <- galah_call() |>
  identify("Heteronympha merope") |>
  filter(year == 2014,
         decimalLatitude < 0) |>
  select(group = "basic",
         COORDINATES_CENTRE_OF_COUNTRY, # add assertion column
         COORDINATES_CENTRE_OF_STATEPROVINCE, # add assertion column
         countryCode, locality) |>
  atlas_occurrences() # <1>

bitter_peas <- galah_call() |>
  identify("Daviesia ulicifolia") |>
  atlas_occurrences() # <1>
```
1. We created a custom DOI for our download by using `atlas_occurrences(mint_doi = TRUE)`.

:::

## Missing coordinates

Mentioned in the [Missing Values
chapter](../2_general-cleaning/missing-values.qmd), many spatial
analytical tools are not compatible with missing coordinate data. We
recommend identifying the rows that have missing data before deciding to
exclude them.

```{r}
# Identify missing data in coordinates
desert_plant |> 
  filter(is.na(decimalLatitude) | is.na (decimalLongitude))
```

You can use `drop_na()` to remove missing values from your dataset.

```{r}
# Excluding them
desert_plant <- desert_plant |> 
  tidyr::drop_na(decimalLatitude, decimalLongitude) # <1>
```

1.  You could also use `drop_na(starts_with("decimal"))` to achieve the
    same thing

## Issues to fix records

Spatial outliers can sometimes be due to taxonomic misidentification,
but not always. Sometimes, records that appear as outliers can be true
observations of a species, but the record has a mistake in its
coordinates. To avoid deleting data that can be included in your
analysis, it's good practice to use several sources of spatial
information to decide whether an unexpected data point is due to a small
but fixable error in coordinates, or not.

Many coordinates issues can be solved with data manipulation instead of
discarding. Here are several coordinate issues that can be identified
and corrected. Follow the link to each case study to learn how to
identify and fix the issue.


### Swapped numeric sign

If there is a clustering of points mirrored to another hemisphere,
consider swapping the sign and correct rather than discarding the
points.

Let's use MacDonnell's desert fuschia occurrence records
for our example (downloaded at the [start of the
chapter](geospatial-cleaning.qmd#prerequisites)). If using the galah
package, we can add the `PRESUMED_SWAPPED_COORDINATE` assertion column
to our download to help find occurrence records flagged as suspicious
for swapped coordinates.

::: aside
<img src="https://ala-images.s3.ap-southeast-2.amazonaws.com/store/f/5/e/7/2ce6ee0a-f662-4e93-88a4-61e7dcb07e5f/original" class="rounded"/></img>

::: figure-caption
[*Eremophila macdonnellii* aka MacDonnell's desert fuschia.<br>Photo by
M. Fagg CC-BY 3.0
(Au)](https://biocache.ala.org.au/occurrences/fcf8a190-5e7b-45b9-9f7d-402dd3e230fd)
:::
:::

```{r}
desert_plant <- desert_plant |>
  drop_na(decimalLongitude, decimalLatitude) # remove NA coordinates

desert_plant |>
  select(PRESUMED_SWAPPED_COORDINATE, everything())
```

We can see this single record highlighted in orange on our map, sitting
in a very similar location to where Australia would be if we mirrored
its location.

```{r}
#| fig-height: 2
#| fig-align: center
# Retrieve map of Australia
aus <- st_transform(ozmap_country, 4326)

ggplot() + 
  geom_sf(data = aus) +
  geom_point(data = desert_plant,
             aes(x = decimalLongitude, 
                 y = decimalLatitude,
                 colour = PRESUMED_SWAPPED_COORDINATE)) + 
  pilot::scale_color_pilot()
```

We can fix the numeric symbols using `case_when()` from dplyr, which
works the same as an `ifelse` statement (but can handle many of
statements at once). The first updates our `decimalLongitude` column so
that when `decimalLongitude` is less than 0, we remove the negative
symbol by multiplying by -1, otherwise we keep the original longitude
value. The second updates our `decimalLatitude` column using the same
process.

```{r}
#| warning: false
#| message: false
desert_plant_filtered <- desert_plant |>
  mutate(
    decimalLongitude = case_when(
      decimalLongitude < 0 ~ decimalLongitude * -1,
      .default = decimalLongitude
    ),
    decimalLatitude = case_when(
      decimalLatitude > 0 ~ decimalLatitude * -1,
      .default = decimalLatitude
    ))
```

Our updated map has fixed the coordinates of our record.

```{r}
#| fig-height: 3
ggplot() + 
  geom_sf(data = aus) +
  geom_point(data = desert_plant_filtered,
             aes(x = decimalLongitude, 
                 y = decimalLatitude,
                 colour = PRESUMED_SWAPPED_COORDINATE)) + 
  pilot::scale_color_pilot()
```

### Location description doesn't match coordinates

Sometimes not all of the metadata about location aligns with the
coordinate location. Occasionally these errors are fixable. Let's use red-eyed tree frog data as an example (downloaded at the
[start of the chapter](geospatial-cleaning/qmd#prerequisites)). 

::: aside
<img src="https://ala-images.s3.ap-southeast-2.amazonaws.com/store/3/1/a/b/987382fa-8168-4249-870b-4e043824ba13/original" class="rounded"/></img>

::: figure-caption
[*Litoria chloris* standing on leaves.<br>Photo by Reiner Richter
CC-BY](https://biocache.ala.org.au/occurrences/e0d5d604-e148-408e-8dbf-984f42701b4c)
:::
:::

```{r}
frogs <- frogs |>
  drop_na(decimalLatitude, decimalLongitude) # remove NA values

frogs
```

When we
plot the coordinates of our red-eyed tree frog occurrences, there is an
unexpected observation near Japan. This is quite surprising---red-eyed
tree frogs are not native to Japan!

```{r}
# Get a map of aus, transform projection
aus <- ozmaps::ozmap_country |>
  st_transform(crs = st_crs(4326))

# Map
ggplot() +
  geom_sf(data = aus,
          fill = NA,
          colour = "grey60") +
  geom_point(data = frogs,
             aes(x = decimalLongitude,
                 y = decimalLatitude),
             colour = "#557755")
```

Let's check the `countryCode` column to see whether this might be an
Australian record with a mistake in the coordinates. Using `distinct()`,
we can see that there are 2 country codes...

```{r}
frogs |>
  distinct(countryCode)
```

...and filtering to Japan (`"JP"`) identifies our stray data point.

```{r}
frogs |>
  filter(countryCode == "JP")
```

So far this observation does seem to be in Japan. To be extra certain,
we can also use the column `locality`, which provides additional
information from the data collector about the record's location.

```{r}
frogs |>
  filter(countryCode == "JP") |>
  select(countryCode, locality, scientificName, decimalLatitude, decimalLongitude)
```

The `locality` column reveals the observation was made in "mt bucca".
This is surprising to see because Mt Bucca is a mountain in Queensland!

When we look at our Japan data point's `decimalLongitude` and
`decimalLatitude` alongside other values in our data, it becomes clear
that the Japan data point seems to sit within the same numerical range
as other points, but the `decimalLatitude` is positive rather than
negative.

```{r}
frogs |>
  arrange(desc(countryCode)) |>
  select(countryCode, decimalLongitude, decimalLatitude) |>
  print(n = 5)
```

All of this evidence suggests that our Japan "outlier" might instead be
an occurrence point with a mis-entered latitude coordinate.

Let's fix this by adding a negative symbol (`-`) to the record's
latitude coordinate number. We'll use `case_when()` from dplyr to
specify that if the `countryCode == "JP"`, then we'll multiply the
`decimalLatitude` by -1, reversing the symbol.

```{r}
frogs_fixed <- frogs |>
  mutate(
    decimalLatitude = case_when(
      countryCode == "JP" ~ decimalLatitude * -1, 
      .default = decimalLatitude 
    ))

frogs_fixed |>
  filter(countryCode == "JP") |> 
  select(decimalLatitude, decimalLongitude, countryCode)
```

Mapping our data again shows our outlier is an outlier no longer!

```{r}
#| code-fold: true
ggplot() +
  geom_sf(data = aus,
          fill = NA,
          colour = "grey60") +
  geom_point(data = frogs_fixed,
             aes(x = decimalLongitude,
                 y = decimalLatitude),
             colour = "#557755")
```

## Issues to remove records

Some coordinates issues cannot be fixed or inferred. In this case, it is
important that you identify which records have issues and remove them
prior to analysis.

Here are some examples of geospatial errors that might need to be
identified and removed in your dataset.

### Flipped coordinates

Flipped coordinates typically appear as a clustering of points, whereby
swapping the latitude and longitude will place the coordinates where
they are expected [@jin2020].

Let's use occurrence data of Kowari (a native, carnivorous mouse species) as an 
example (downloaded at the
[start of the chapter](geospatial-cleaning.html#prerequisites)). 
If using the galah package, you can add the `COUNTRY_COORDINATE_MISMATCH` 
assertion column to your download to find occurrence records flagged as 
with mismatching coordinates and country data.

::: aside

<img src="https://ala-images.s3.ap-southeast-2.amazonaws.com/store/0/3/1/9/6015cc38-f4c3-47d3-b7c5-1adf563e9130/original" class="rounded"/></img>

::: figure-caption
[*Dasyuroides byrnei* pair captured in red light.<br>Photo by Ged Tranter 
CC-BY](https://biocache.ala.org.au/occurrences/fa0c5c98-007a-4af9-b6db-0c8dcacaeaf5)
:::
:::

```{r}
native_mice <- native_mice |>
  drop_na(decimalLongitude, decimalLatitude)
  
native_mice |>
  select(COUNTRY_COORDINATE_MISMATCH, everything())
```

Sometimes, flipped coordinates can be fixed by switching the latitude and longitude coordinates. Other times, like in this example, the way to fix the coordinates isn't obvious.

```{r}
#| fig-height: 2.5
ggplot() + 
  geom_sf(data = aus) +
  geom_point(data = native_mice,
             aes(x = decimalLongitude,
                 y = decimalLatitude,
             colour = COUNTRY_COORDINATE_MISMATCH)) + 
  pilot::scale_color_pilot()
```

To remove these points from our data, we can filter our records to only records with coordinates within Australia's land border.

```{r}
#| fig-height: 2.5
native_mice_filtered <- native_mice |>
  filter(decimalLongitude > 100,
         decimalLongitude < 155,
         decimalLatitude > -45,
         decimalLatitude < -10)

ggplot() + 
  geom_sf(data = aus) +
  geom_point(data = native_mice_filtered,
             aes(x = decimalLongitude,
                 y = decimalLatitude,
             colour = COUNTRY_COORDINATE_MISMATCH)) + 
  pilot::scale_color_pilot()
```


### Zero coordinates

Some records are mistakenly recorded with zero as their latitude and/or
longitude coordinates. These records will not accurately represent their
valid location and must be removed.

Let's use acacia data as an example (downloaded at the
[start of the chapter](geospatial-cleaning/qmd#prerequisites)). 
If using the galah package, you can add the `ZERO_COORDINATE` assertion
column to your download to find occurrence records flagged as suspicious
for zero coordinates.

::: aside
<img src="https://ala-images.s3.ap-southeast-2.amazonaws.com/store/0/5/5/0/795c14ba-3ee5-4af6-a3a5-d78c04e50550/original" class="rounded"/></img>

::: figure-caption
[*Acacia aneura* flowering.<br>Photo by rachbaxter CC-BY-NC 4.0
(Int)](https://biocache.ala.org.au/occurrences/9081b056-df23-495c-806e-fc5b265afb3a)
:::
:::

```{r}
acacias <- acacias |>
  drop_na(decimalLatitude, decimalLongitude) # remove NA values

acacias |>
  select(ZERO_COORDINATE, everything())
```

We can see the suspicious record in orange on our map.

```{r}
#| fig-height: 2
ggplot() + 
  geom_sf(data = aus) +
  geom_point(data = acacias,
             aes(x = decimalLongitude, 
                 y = decimalLatitude,
                 colour = ZERO_COORDINATE)) +
  pilot::scale_color_pilot()
```

We can remove the problematic record by filtering our data to remove
records with longitude or latitude coordinates that equal zero.

```{r}
#| fig-height: 3.2
acacias_filtered <- acacias |>
  filter(decimalLongitude != 0,
         decimalLatitude != 0)

ggplot() + 
  geom_sf(data = aus) +
  geom_point(data = acacias_filtered,
             aes(x = decimalLongitude, 
                 y = decimalLatitude,
                 colour = ZERO_COORDINATE)) +
  pilot::scale_color_pilot()
```

### Centroids

**Centroids**, or coordinates that mark the exact centre point of an
area, are sometimes assigned to an occurrence record when the original
observation location was provided as a description. If a record was
collected using a vague locality description or from incorrect
georeferencing, centroids can be used to categorise the record into
broadly the correct area[^geospatial-cleaning-1].

[^geospatial-cleaning-1]: This can happen when record locations is
    incorrectly given as the physical location of the specimen, or
    because they represent individuals from captivity or grown in
    horticulture (but were not clearly labelled as such).

Let's use common brown butterfly data for our example (downloaded at the
[start of the chapter](geospatial-cleaning.qmd#prerequisites)). If using
the galah package, we can add the `COORDINATES_CENTRE_OF_COUNTRY` or
`COORDINATES_CENTRE_OF_STATEPROVINCE` assertions columns to your
download to find occurrence records flagged as suspicious for centroid
coordinates.

::: aside
<img src="https://ala-images.s3.ap-southeast-2.amazonaws.com/store/5/c/2/5/5ad0125f-8684-4e66-b5bf-cd0b0f8e52c5/original" class="rounded"/></img>

::: figure-caption
[*Heteronympha merope merope* resting on leaf litter.<br>Photo by
Mononymous CC-BY-NC 4.0
(Int)](https://biocache.ala.org.au/occurrences/6f6f172b-5d8e-4879-b77c-3517e08819e8)
:::
:::

```{r}
butterflies <- butterflies |>
  drop_na(decimalLatitude, decimalLongitude) # remove NA values

butterflies |>
  select(COORDINATES_CENTRE_OF_COUNTRY,
         COORDINATES_CENTRE_OF_STATEPROVINCE,
         everything())
```

Filtering our data to records flagged as suspicious, we return one
record.

```{r}
butterflies |>
  filter(
    COORDINATES_CENTRE_OF_COUNTRY == TRUE |
    COORDINATES_CENTRE_OF_STATEPROVINCE == TRUE
    )
```

The suspicious record is the single orange point on our map.

```{r}
ggplot() + 
  geom_sf(data = aus) +
  geom_point(data = butterflies,
             aes(x = decimalLongitude, 
                 y = decimalLatitude,
                 colour = COORDINATES_CENTRE_OF_STATEPROVINCE)) +
  pilot::scale_color_pilot() +
  theme(legend.position = "none")

```

We can remove this data point by excluding this record from our
dataframe.

```{r}
butterflies_filtered <- butterflies |>
  filter(COORDINATES_CENTRE_OF_STATEPROVINCE == FALSE)

ggplot() + 
  geom_sf(data = aus) +
  geom_point(data = butterflies_filtered,
             aes(x = decimalLongitude, 
                 y = decimalLatitude,
                 colour = COORDINATES_CENTRE_OF_STATEPROVINCE)) +
  pilot::scale_color_pilot() +
  theme(legend.position = "none")

```

### Cities, zoos, aquariums, museums & herbaria

Some observations are recorded in locations where animals and plants
live but do not naturally occur. A common example is observations
recorded at public facilities like zoos, aquariums and botanic gardens.

Other times, observations are recorded in places where specimens of
animals and plants might be stored, but not where they were observed.
Common examples are museums and herbaria.

In some cases, like with records of the Gorse Bitter-pea (downloaded at
the [start of the chapter](geospatial-cleaning.qmd#prerequisites)), these locations can appear suspicious
but not overly obvious. When we map these observations, there is a
tailing distribution of points in Western Australia with several points
located near the west coast of Australia.

::: aside
<img src="https://ala-images.s3.ap-southeast-2.amazonaws.com/store/a/5/d/3/4407a084-d780-4972-84e6-2fb297793d5a/original" class="rounded"/></img>

::: figure-caption
[*Daviesia ulicifolia ruscifolia* flowering.<br>Photo by Warren
Tomlinson CC-BY-NC 4.0
(Int)](https://biocache.ala.org.au/occurrences/fde7691c-37f3-40a0-a2b7-628b0d0240c7)
:::
:::

```{r}
bitter_peas <- bitter_peas |>
  drop_na(decimalLongitude, decimalLatitude) # remove NA values

ggplot() + 
  geom_sf(data = aus) +
  geom_point(data = bitter_peas,
             aes(x = decimalLongitude,
                 y = decimalLatitude),
             colour = pilot::pilot_color("navy"))
```

Suspiciously, if we [Google the coordinates of the Western Australia
Herbarium](https://www.google.com/search?q=western+australia+herbarium+coordinates&sca_esv=3e98302ba505d99d&rlz=1C1GCEB_enAU958AU958&ei=EAHoZaHTI5up2roP_-Wp6AU&ved=0ahUKEwihm_3R9d6EAxWblFYBHf9yCl0Q4dUDCBA&uact=5&oq=western+australia+herbarium+coordinates&gs_lp=Egxnd3Mtd2l6LXNlcnAaAhgCIid3ZXN0ZXJuIGF1c3RyYWxpYSBoZXJiYXJpdW0gY29vcmRpbmF0ZXMyCBAAGIAEGKIEMggQABiABBiiBDIIEAAYiQUYogRI_h5QxgdY1B1wAngAkAEAmAHQAqABvBSqAQUyLTUuNLgBA8gBAPgBAZgCBqAC7AjCAg4QABiABBiKBRiGAxiwA8ICDhAAGIAEGKIEGLADGIsDwgIOEAAYiQUYogQYsAMYiwPCAgYQABgeGA3CAgsQABiABBiKBRiGA8ICCxAAGIAEGKIEGIsDmAMAiAYBkAYHkgcHMi4wLjMuMaAHyys&sclient=gws-wiz-serp),
the coordinates overlap with one of the points. We have highlighted this point in orange.

```{r}
ggplot() + 
  geom_sf(data = aus) +
  geom_point(data = bitter_peas,
             aes(x = decimalLongitude,
                 y = decimalLatitude),
             colour = "#204466") +
  geom_point(aes(x = 115.8, y = -31.9), # point coordinates
             colour = "#f28100") +
  theme(legend.position = "none")
```

Filtering our data to the two left-most data points reveals that the
data resources that supplied those records are both state herbaria.

```{r}
bitter_peas |>
  filter(decimalLongitude < 120) |>
  select(dataResourceName)
```

Having identified they could be can remove these records from our data.

```{r}
bitter_peas_filtered <- bitter_peas |>
  filter(decimalLongitude > 120)

ggplot() + 
  geom_sf(data = aus) +
  geom_point(data = bitter_peas_filtered,
             aes(x = decimalLongitude,
                 y = decimalLatitude),
             colour = "#204466")
```

::: {.callout-tip collapse="true"}
## Use `basisOfRecord`

You can use the field `basisOfRecord` to avoid including records from
museums and herbaria when creating your query in galah.

```{r}
#| eval: false
library(galah)

# Show values in `basisOfRecord` field
search_all(fields, "basisOfRecord") |>
  show_values()

# Filter basis of record to only human observations
galah_call() |>
  identify("Daviesia ulicifolia") |>
  filter(basisOfRecord == "HUMAN_OBSERVATION") |>
  atlas_counts()
```
:::

## Use expert distributions

*Coming soon...* <!--once galah supports expert distributions...-->

<!-- This section can have an example expert distribution, then plot points on the top, then find which points are outside of the distribution to investigate -->

````{=html}
<!--
One way to identify suspicious observations is to use an expert
distribution to determine whether an occurrence record is within the
possible range of a species. At the most basic, expert distributions can
be found in the literature (like [this one]()), then
compared visually to your points.

It's also possible to download expert distributions as shapefiles, and
these can be plotted on a map to directly compare with your occurrence
record locations.


```{r}

```

-->
````

## Packages

#### CoordinateCleaner

The [CoordinateCleaner
package](https://docs.ropensci.org/CoordinateCleaner/index.html) is a
package for automated flagging of common spatial and temporal errors of
biological and paleaontological data. It is particularly good at
cleaning data from GBIF.

Here is an example of a general cleaning function, but there are many
more bespoke options that the package offers.

```{r}
#| warning: false
#| message: false
library(CoordinateCleaner)

# Run record-level tests
coordinate_tests <- clean_coordinates(x = butterflies, 
                                      species = "scientificName")
summary(coordinate_tests)
plot(coordinate_tests)
```

## Summary

Each of the cleaning steps in this chapter do not have to be run in
order, or even at all. Whether they are used is context dependent and
taxon dependent. As an example, what is one species that has many
"wrong" coordinates based on many of the steps listed above?

The Great White Shark.

::: aside
<img src="https://ala-images.s3.ap-southeast-2.amazonaws.com/store/5/8/8/5/1b2967ba-5113-43cb-bff0-3ca958c15885/original" class="rounded"/></img>

::: figure-caption
[*Carcharodon carcharias* swimming off the South Australian coast.<br>Photo by Coffin Bay Scuba Co. CC-BY-NC 4.0
(Int)](https://biocache.ala.org.au/occurrences/3be163bd-a0f6-43c5-be0a-46e7b6690924)
:::
:::

```{r}
#| code-fold: true
#| warning: false
#| message: false
#| fig-height: 2.3
# Download occurrence records
sharks <- galah_call() |>
  identify("Carcharodon carcharias") |>
  filter(basisOfRecord == "HUMAN_OBSERVATION") |>
  apply_profile(ALA) |>
  atlas_occurrences()

# Retrieve map of Australia
aus <- st_transform(ozmap_country, 4326)

# Map occurrences
sharks |>
  drop_na(decimalLongitude, decimalLatitude) |>
  ggplot() + 
  geom_sf(data = aus,
          colour = "grey60",
          fill = "white") +
  geom_point(data = sharks,
             aes(x = decimalLongitude,
                 y = decimalLatitude),
             colour = "#135277") +
  theme_light()
```


The difficulty with cleaning Great White Shark occurrence data is that these sharks have a *massive* habitat range, and these locations along (what appear to be) the North American coast and Madagascar could very well be true occurrences. In this case, we might need to decide the spatial range that makes sense for our specific investigation. Be sure to consider the taxonomic and spatial range of
your species before jumping into data cleaning!


