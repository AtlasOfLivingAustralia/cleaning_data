---
editor: 
  markdown: 
    wrap: 72
number-depth: 3
code-annotations: hover
---

# Geospatial cleaning {#sec-geospatial-cleaning}

Geospatial observational data provide essential information about species’
locations over time and space, and can be combined with ecological data to
understand species-environment interactions. However, working with geospatial
data can be challenging, as seemingly minor issues can significantly impact data
validity.

**Outliers**—data points that are considerably distant from the majority of a
species’ observations and can skew overall distribution—are a major challenge in
geospatial data cleaning. Identifying outliers can be difficult because it's not
always clear whether they are true outliers or data errors. Errors can result
from species misidentification or incorrect geo-referencing. Other accidental
errors, such as reversing numeric symbols, mistyping coordinates, or entering
incorrect locations, can dramatically affect the reported location of a species.
For species with smaller ranges, these errors may be easier to detect. However,
for species with larger ranges or analyses involving many species over a large
area, these errors become much more difficult to identify.

Every dataset has its own combination of issues requiring bespoke cleaning
methods (e.g. [@jin2020]). It is crucial to clean geospatial data effectively to ensure their
usefulness, as errors can lead to unexpected results in species range estimates
and analytic outputs.

In this chapter, we will highlight common issues with coordinate data and
demonstrate how to correct or remove suspicious-seeming records.

:::{.callout-tip}

## Checklist

This chapter can be read more like a checklist of possible geospatial errors in 
a dataset, how to identify them, and how to fix them.

:::

### Prerequisites

In this chapter we'll use several datasets:

  * MacDonnell's desert fuschia (*Eremophila macdonnellii*) occurrence records from the ALA
  * Red-eyed tree frog (*Litoria chloris*) occurrence records in 2013 from the ALA
  * Kowari (*Dasyuroides byrnei*, a native mouse) occurrence records from the ALA
  * *Acacia* occurrence records from the ALA
  * Common brown butterfly (*Heteronympha merope*) occurrence records in 2014 from the ALA
  * Bitter pea (*Daviesia ulicifolia*) occurrence records from the ALA

```{r prereq-internal}
#| echo: false
#| warning: false
#| message: false
# packages
library(galah)
library(ggplot2)
library(dplyr)
library(sf)
library(ozmaps)
library(tidyr)
library(stringr)
galah_config(email = Sys.getenv("ALA_EMAIL"),
             verbose = FALSE)

# get DOIs for chapter
doi_table <- here::here("data", "galah-dois", "doi_table") |>
  arrow::open_dataset() |>
  filter(chapter == "Geospatial cleaning") |>
  collect()

# extract dois
doi_desert_plant <- doi_table |> filter(name == "desert_plant") |> pull(doi)
doi_frogs <- doi_table |> filter(name == "frogs") |> pull(doi)
doi_native_mice <- doi_table |> filter(name == "native_mice") |> pull(doi)
doi_acacias <- doi_table |> filter(name == "acacias") |> pull(doi)
doi_butterflies <- doi_table |> filter(name == "butterflies") |> pull(doi)
doi_bitter_peas <- doi_table |> filter(name == "bitter_peas") |> pull(doi)

# download
desert_plant <- galah_call() |>
  filter(doi == doi_desert_plant) |>
  atlas_occurrences()
frogs <- galah_call() |>
  filter(doi == doi_frogs) |>
  atlas_occurrences()
native_mice <- galah_call() |>
  filter(doi == doi_native_mice) |>
  atlas_occurrences()
acacias <- galah_call() |>
  filter(doi == doi_acacias) |>
  atlas_occurrences()
butterflies <- galah_call() |>
  filter(doi == doi_butterflies) |>
  atlas_occurrences()
bitter_peas <- galah_call() |>
  filter(doi == doi_bitter_peas) |>
  atlas_occurrences()
```

```{r prereq-external}
#| echo: false
test <- glue::glue(
"
# packages
library(galah)
library(ggplot2)
library(dplyr)
library(sf)
library(ozmaps)
library(tidyr)
library(stringr)
galah_config(email = \"your-email-here\") # ALA-registered email

desert_plant <- galah_call() |>
  filter(doi == \"{doi_desert_plant}\") |>
  atlas_occurrences()

frogs <- galah_call() |>
  filter(doi == \"{doi_frogs}\") |>
  atlas_occurrences()

native_mice <- galah_call() |>
  filter(doi == \"{doi_native_mice}\") |>
  atlas_occurrences()

acacias <- galah_call() |>
  filter(doi == \"{doi_acacias}\") |>
  atlas_occurrences()

butterflies <- galah_call() |>
  filter(doi == \"{doi_butterflies}\") |>
  atlas_occurrences()

bitter_peas <- galah_call() |>
  filter(doi == \"{doi_bitter_peas}\") |>
  atlas_occurrences()
"
)
```

```{r prereq-printed}
#| eval: false
#| code: !expr test
#| echo: true
```

::: aside
<img src="https://ala-images.s3.ap-southeast-2.amazonaws.com/store/f/5/e/7/2ce6ee0a-f662-4e93-88a4-61e7dcb07e5f/original" class="rounded"/></img>

::: figure-caption
[*Eremophila macdonnellii* aka MacDonnell's desert fuschia.<br>Photo by
M. Fagg CC-BY 3.0
(Au)](https://biocache.ala.org.au/occurrences/fcf8a190-5e7b-45b9-9f7d-402dd3e230fd)
:::

<img src="https://ala-images.s3.ap-southeast-2.amazonaws.com/store/3/1/a/b/987382fa-8168-4249-870b-4e043824ba13/original" class="rounded"/></img>

::: figure-caption
[*Litoria chloris* standing on leaves.<br>Photo by Reiner Richter
CC-BY](https://biocache.ala.org.au/occurrences/e0d5d604-e148-408e-8dbf-984f42701b4c)
:::

<img src="https://ala-images.s3.ap-southeast-2.amazonaws.com/store/0/3/1/9/6015cc38-f4c3-47d3-b7c5-1adf563e9130/original" class="rounded"/></img>

::: figure-caption
[*Dasyuroides byrnei* pair captured in red light.<br>Photo by Ged Tranter 
CC-BY](https://biocache.ala.org.au/occurrences/fa0c5c98-007a-4af9-b6db-0c8dcacaeaf5)
:::

<img src="https://ala-images.s3.ap-southeast-2.amazonaws.com/store/0/5/5/0/795c14ba-3ee5-4af6-a3a5-d78c04e50550/original" class="rounded"/></img>

::: figure-caption
[*Acacia aneura* flowering.<br>Photo by rachbaxter CC-BY-NC 4.0
(Int)](https://biocache.ala.org.au/occurrences/9081b056-df23-495c-806e-fc5b265afb3a)
:::

<img src="https://ala-images.s3.ap-southeast-2.amazonaws.com/store/5/c/2/5/5ad0125f-8684-4e66-b5bf-cd0b0f8e52c5/original" class="rounded"/></img>

::: figure-caption
[*Heteronympha merope merope* resting on leaf litter.<br>Photo by
Mononymous CC-BY-NC 4.0
(Int)](https://biocache.ala.org.au/occurrences/6f6f172b-5d8e-4879-b77c-3517e08819e8)
:::

<img src="https://ala-images.s3.ap-southeast-2.amazonaws.com/store/a/5/d/3/4407a084-d780-4972-84e6-2fb297793d5a/original" class="rounded"/></img>

::: figure-caption
[*Daviesia ulicifolia ruscifolia* flowering.<br>Photo by Warren
Tomlinson CC-BY-NC 4.0
(Int)](https://biocache.ala.org.au/occurrences/fde7691c-37f3-40a0-a2b7-628b0d0240c7)
:::
:::

<!-- Queries -->
:::{.callout-note collapse="true" appearance="minimal"}

#### Original download queries

**Note:** You don't need to run this code block to read this chapter. It can, however, be useful to see the original download query. This code will download the latest data from the ALA, which you are welcome to use instead, though the data might not exactly reproduce results in this chapter.

```{r prereq-orig-query}
#| eval: false
library(galah)
galah_config(email = "your-email-here")

desert_plant <- galah_call() |>
  identify("Eremophila macdonnellii") |>
  select(group = "basic", 
         PRESUMED_SWAPPED_COORDINATE) |> # add assertion column
  atlas_occurrences() # <1>

frogs <- galah_call() |>
  identify("Litoria chloris") |>
  filter(year == 2013) |>
  select(group = "basic",
         countryCode, locality,
         family, genus, species, 
         cl22, eventDate) |>
  atlas_occurrences() # <1>

native_mice <- galah_call() |>
  identify("Dasyuroides byrnei") |>
  select(scientificName, decimalLongitude, decimalLatitude,
         eventDate,
         country, countryCode, locality, 
         COUNTRY_COORDINATE_MISMATCH,
         group = "assertions") |>
  atlas_occurrences() # <1>

acacias <- galah_call() |>
  identify("acacia aneura") |>
  select(group = "basic",
         ZERO_COORDINATE, # add assertion column
         countryCode, locality) |>
  atlas_occurrences() # <1>

butterflies <- galah_call() |>
  identify("Heteronympha merope") |>
  filter(year == 2014,
         decimalLatitude < 0) |>
  select(group = "basic",
         COORDINATES_CENTRE_OF_COUNTRY, # add assertion column
         COORDINATES_CENTRE_OF_STATEPROVINCE, # add assertion column
         countryCode, locality) |>
  atlas_occurrences() # <1>

bitter_peas <- galah_call() |>
  identify("Daviesia ulicifolia") |>
  atlas_occurrences() # <1>
```
1. We created a custom DOI for our download by using `atlas_occurrences(mint_doi = TRUE)`.

:::

## Missing coordinates

As discussed in [Missing Values
chapter](../2_general-cleaning/missing-values.html##missing-coordinates), many spatial
analytical tools are not compatible with missing coordinate data. We
recommend identifying the rows that have missing data before deciding to
exclude them.

```{r}
# Identify missing data in coordinates
desert_plant |> 
  filter(is.na(decimalLatitude) | is.na (decimalLongitude))
```

<!-- Incredibly minor point, but I wondered if it would be simpler to do something like: -->
<!-- desert_plant |> filter(!is.na(decimalLatitude), !is.na(decimalLongitude)) -->
<!-- Only because we've used filter to identify NAs above, and so it logically follows to do the inverse using the same function rather than introduce a new (albeit very nice) function -SB  -->

<!-- I see what you are saying, but I think we keep it. I think drop_na() makes a lot of sense and we might as well suggest the best function for the job -DK -->

You can use `drop_na()` to remove missing values from your dataset.

```{r}
# Excluding them
desert_plant <- desert_plant |> 
  tidyr::drop_na(decimalLatitude, decimalLongitude) # <1>
```

1.  You could also use `filter(!is.na(decimalLatitude), !is.na(decimalLongitude))` to achieve the
    same thing

## Correcting fixable coordinate errors

<!-- Possible header options are "Correcting Fixable Coordinate Errors" and "Excluding Unfixable Coordinate Errors". Also see comments in slack about turning this into 1 example instead of 2 -SB -->

Spatial outliers can sometimes result from taxonomic misidentification, but not
always. Occasionally, records that appear as outliers are true observations of a
species but contain mistakes in their coordinates. To avoid unnecessarily
deleting data, it's good practice to use multiple sources of spatial information
to decide whether an unexpected data point is due to a small but fixable error
in coordinates.

Many coordinate issues can be solved through data manipulation rather than
discarding the data. Here are several coordinate issues that can be identified
and corrected. 


### Swapped numeric sign

If you notice a cluster of points mirrored in the opposite hemisphere, consider
correcting the sign instead of discarding the points.

Let's use MacDonnell's desert fuschia occurrence records for our example. Including the
`PRESUMED_SWAPPED_COORDINATE` assertion column when downloading records using
the galah package allows us to identify records flagged as potentially having
swapped coordinates.

::: aside
<img src="https://ala-images.s3.ap-southeast-2.amazonaws.com/store/f/5/e/7/2ce6ee0a-f662-4e93-88a4-61e7dcb07e5f/original" class="rounded"/></img>

::: figure-caption
[*Eremophila macdonnellii* aka MacDonnell's desert fuschia.<br>Photo by
M. Fagg CC-BY 3.0
(Au)](https://biocache.ala.org.au/occurrences/fcf8a190-5e7b-45b9-9f7d-402dd3e230fd)
:::
:::

```{r}
desert_plant <- desert_plant |>
  drop_na(decimalLongitude, decimalLatitude) # remove NA coordinates

desert_plant |>
  select(PRESUMED_SWAPPED_COORDINATE, everything())
```

If we plot these records on a map and colour the points based on values in the `PRESUMED_SWAPPED_COORDINATE` assertion column, we can see that there is a single record (in orange) that looks like its coordinates have been mirrored across hemispheres.   

```{r}
#| fig-height: 2
#| fig-align: center
# Retrieve map of Australia
aus <- st_transform(ozmap_country, 4326)

ggplot() + 
  geom_sf(data = aus) +
  geom_point(data = desert_plant,
             aes(x = decimalLongitude, 
                 y = decimalLatitude,
                 colour = PRESUMED_SWAPPED_COORDINATE)) + 
  pilot::scale_color_pilot()
```

We can correct the numeric signs using `if_else()` from dplyr. The first 
statement updates our `decimalLongitude` column so
that when `decimalLongitude` is less than 0, we remove the negative
symbol by multiplying by -1, otherwise we keep the original longitude
value. The second statement updates our `decimalLatitude` column using the same
process.

```{r}
#| warning: false
#| message: false
desert_plant_filtered <- desert_plant |>
  mutate(
    decimalLongitude = if_else(decimalLongitude < 0,
      decimalLongitude * -1,
      decimalLongitude
    ),
    decimalLatitude = if_else(decimalLatitude > 0,
      decimalLatitude * -1,
      decimalLatitude
    )
  )

```

And here's the updated map, with the corrected coordinates. 

```{r}
#| fig-height: 3
ggplot() + 
  geom_sf(data = aus) +
  geom_point(data = desert_plant_filtered,
             aes(x = decimalLongitude, 
                 y = decimalLatitude,
                 colour = PRESUMED_SWAPPED_COORDINATE)) + 
  pilot::scale_color_pilot()
```

### Location description doesn't match coordinates

Misalignment between location metadata and coordinates could indicate errors in the dataset, but it's sometimes possible to rectify these. Let's use red-eyed tree frog data as an example. 

::: aside
<img src="https://ala-images.s3.ap-southeast-2.amazonaws.com/store/3/1/a/b/987382fa-8168-4249-870b-4e043824ba13/original" class="rounded"/></img>

::: figure-caption
[*Litoria chloris* standing on leaves.<br>Photo by Reiner Richter
CC-BY](https://biocache.ala.org.au/occurrences/e0d5d604-e148-408e-8dbf-984f42701b4c)
:::
:::

```{r}
frogs <- frogs |>
  drop_na(decimalLatitude, decimalLongitude) # remove NA values

frogs
```

When we plot the coordinates of our red-eyed tree frog occurrences, there is an
unexpected observation near Japan (or where Japan would appear if we had plotted 
more countries and not just Australia). This is quite surprising---red-eyed
tree frogs are not native to Japan!

```{r}
# Get a map of aus, transform projection
aus <- st_transform(ozmap_country, 4326)

# Map
ggplot() +
  geom_sf(data = aus,
          colour = "grey60") +
  geom_point(data = frogs,
             aes(x = decimalLongitude,
                 y = decimalLatitude),
             colour = "#557755")
```

Let's check the `countryCode` column to see whether this might be an
Australian record with a mistake in the coordinates. Using `distinct()`,
we can see that there are 2 country codes...

```{r}
frogs |>
  distinct(countryCode)
```

...and filtering to Japan (`"JP"`) identifies our stray data point.

```{r}
frogs |>
  filter(countryCode == "JP")
```

So far this observation does seem to be in Japan. To be extra certain,
we can also use the column `locality`, which provides additional
information from the data collector about the record's location.

```{r}
frogs |>
  filter(countryCode == "JP") |>
  select(countryCode, locality, scientificName, decimalLatitude, decimalLongitude)
```

The `locality` column reveals the observation was made in "mt bucca".
This is surprising to see because Mt Bucca is a mountain in Queensland!

When we look at our Japan data point's `decimalLongitude` and
`decimalLatitude` alongside other values in our data, it becomes clear
that the Japan data point seems to sit within the same numerical range
as other points, but the `decimalLatitude` is positive rather than
negative.

```{r}
frogs |>
  arrange(desc(countryCode)) |>
  select(countryCode, decimalLongitude, decimalLatitude) |>
  print(n = 5)
```

All of this evidence suggests that our Japan "outlier" might instead be
an occurrence point with a mis-entered latitude coordinate.

Let's fix this by adding a negative symbol (`-`) to the record's
latitude coordinate number. We'll use `case_when()` from dplyr to
specify that if the `countryCode == "JP"`, then we'll multiply the
`decimalLatitude` by -1, reversing the symbol.

```{r}
frogs_fixed <- frogs |>
  mutate(
    decimalLatitude = case_when(
      countryCode == "JP" ~ decimalLatitude * -1, 
      .default = decimalLatitude 
    ))

frogs_fixed |>
  filter(countryCode == "JP") |> 
  select(decimalLatitude, decimalLongitude, countryCode)
```

Mapping our data again shows our outlier is an outlier no longer!

```{r}
#| code-fold: true
ggplot() +
  geom_sf(data = aus,
          colour = "grey60") +
  geom_point(data = frogs_fixed,
             aes(x = decimalLongitude,
                 y = decimalLatitude),
             colour = "#557755")
```

## Excluding unfixable coordinate errors

Some coordinates issues cannot be fixed or inferred. In this case, it is
important that you identify which records have issues and remove them
prior to analysis. Here are some examples of geospatial errors that might 
need to be identified and removed in your dataset.

### Flipped coordinates

Records with flipped coordinates typically appear as a group of points in an 
unexpected location. Although sometimes they can be fixed, this is not always 
the case.

Let's use occurrence records of Kowari (a native, carnivorous mouse species) as
an example. Including the `COUNTRY_COORDINATE_MISMATCH` assertion column when
downloading records using the galah package allows us to identify records
flagged as having mismatches between coordinates and country metadata.

::: aside

<img src="https://ala-images.s3.ap-southeast-2.amazonaws.com/store/0/3/1/9/6015cc38-f4c3-47d3-b7c5-1adf563e9130/original" class="rounded"/></img>

::: figure-caption
[*Dasyuroides byrnei* pair captured in red light.<br>Photo by Ged Tranter 
CC-BY](https://biocache.ala.org.au/occurrences/fa0c5c98-007a-4af9-b6db-0c8dcacaeaf5)
:::
:::

```{r}
native_mice <- native_mice |>
  drop_na(decimalLongitude, decimalLatitude)
  
native_mice |>
  select(COUNTRY_COORDINATE_MISMATCH, everything())
```

Sometimes, flipped coordinates can be fixed by switching the latitude and longitude coordinates. Other times, like in this example, the way to fix the coordinates isn't obvious.

```{r}
#| fig-height: 2.5
ggplot() + 
  geom_sf(data = aus) +
  geom_point(data = native_mice,
             aes(x = decimalLongitude,
                 y = decimalLatitude,
             colour = COUNTRY_COORDINATE_MISMATCH)) + 
  pilot::scale_color_pilot()
```

To remove these data, we can filter the dataset to exclude records that do not fall within Australia's minimum and maximum coordinates.  

```{r}
#| fig-height: 2.5
native_mice_filtered <- native_mice |>
  filter(decimalLongitude > 100,
         decimalLongitude < 155,
         decimalLatitude > -45,
         decimalLatitude < -10)

ggplot() + 
  geom_sf(data = aus) +
  geom_point(data = native_mice_filtered,
             aes(x = decimalLongitude,
                 y = decimalLatitude,
             colour = COUNTRY_COORDINATE_MISMATCH)) + 
  pilot::scale_color_pilot()
```


### Zero coordinates

Sometimes latitude and/or longitude data are recorded as having zero values;
these values are not accurate representations of locations and thus should be
removed.

Let's use acacia data as an example. Including the `ZERO_COORDINATE` assertion
column to your download allows us to identify records flagged as having zero
values in the coordinate fields.

::: aside
<img src="https://ala-images.s3.ap-southeast-2.amazonaws.com/store/0/5/5/0/795c14ba-3ee5-4af6-a3a5-d78c04e50550/original" class="rounded"/></img>

::: figure-caption
[*Acacia aneura* flowering.<br>Photo by rachbaxter CC-BY-NC 4.0
(Int)](https://biocache.ala.org.au/occurrences/9081b056-df23-495c-806e-fc5b265afb3a)
:::
:::

```{r}
acacias <- acacias |>
  drop_na(decimalLatitude, decimalLongitude) # remove NA values

acacias |>
  select(ZERO_COORDINATE, everything())
```

We can see the flagged record in orange on our map.

```{r}
#| fig-height: 2
ggplot() + 
  geom_sf(data = aus) +
  geom_point(data = acacias,
             aes(x = decimalLongitude, 
                 y = decimalLatitude,
                 colour = ZERO_COORDINATE)) +
  pilot::scale_color_pilot()
```

We can remove this record by filtering our dataset to remove
records with longitude or latitude coordinates that equal zero.

```{r}
#| fig-height: 3.2
acacias_filtered <- acacias |>
  filter(decimalLongitude != 0,
         decimalLatitude != 0)

ggplot() + 
  geom_sf(data = aus) +
  geom_point(data = acacias_filtered,
             aes(x = decimalLongitude, 
                 y = decimalLatitude,
                 colour = ZERO_COORDINATE)) +
  pilot::scale_color_pilot()
```

### Centroids

**Centroids**, or coordinates that mark the exact centre point of an
area, are sometimes assigned to an occurrence record when the original
observation location was provided as a description. If a record was
collected using a vague locality description or through incorrect
geo-referencing, centroids can be used to categorise the record into
broadly the correct area[^geospatial-cleaning-1].

[^geospatial-cleaning-1]: This can happen when record locations are
    incorrectly given as the physical location of the specimen, or
    because they represent individuals from captivity or grown in
    horticulture (but were not clearly labelled as such).

Let's use common brown butterfly data for our example. 


:::{.callout-warning collapse="false"}
###### ALA centroid assertions currently under review

The ALA is currently (September 2025) in the process of reviewing the `COORDINATES_CENTRE_OF_COUNTRY` and `COORDINATES_CENTRE_OF_STATEPROVINCE` assertions columns to ensure they are accurate. 
While this process is ongoing, we suggest using an alternative method of 
generating centroids for a map or polygon like `sf::st_centroid()` and comparing the coordinates to observation coordinates in your dataset.

:::

::: aside
<img src="https://ala-images.s3.ap-southeast-2.amazonaws.com/store/5/c/2/5/5ad0125f-8684-4e66-b5bf-cd0b0f8e52c5/original" class="rounded"/></img>

::: figure-caption
[*Heteronympha merope merope* resting on leaf litter.<br>Photo by
Mononymous CC-BY-NC 4.0
(Int)](https://biocache.ala.org.au/occurrences/6f6f172b-5d8e-4879-b77c-3517e08819e8)
:::
:::


Including the
`COORDINATES_CENTRE_OF_COUNTRY` and/or `COORDINATES_CENTRE_OF_STATEPROVINCE`
assertions columns to your download allows us to identify records flagged as
containing centroid coordinates.

```{r}
butterflies <- butterflies |>
  drop_na(decimalLatitude, decimalLongitude) # remove NA values

butterflies |>
  select(COORDINATES_CENTRE_OF_COUNTRY,
         COORDINATES_CENTRE_OF_STATEPROVINCE,
         everything())
```

Filtering our data to flagged records, we return one record.

```{r}
butterflies |>
  filter(
    COORDINATES_CENTRE_OF_COUNTRY == TRUE |
    COORDINATES_CENTRE_OF_STATEPROVINCE == TRUE
    )
```

The flagged record is the single orange point on our map.

```{r}
ggplot() + 
  geom_sf(data = aus) +
  geom_point(data = butterflies,
             aes(x = decimalLongitude, 
                 y = decimalLatitude,
                 colour = COORDINATES_CENTRE_OF_STATEPROVINCE)) +
  pilot::scale_color_pilot() +
  theme(legend.position = "none")

```

We can remove this data point by excluding this record from our
dataset.

```{r}
butterflies_filtered <- butterflies |>
  filter(COORDINATES_CENTRE_OF_STATEPROVINCE == FALSE)

ggplot() + 
  geom_sf(data = aus) +
  geom_point(data = butterflies_filtered,
             aes(x = decimalLongitude, 
                 y = decimalLatitude,
                 colour = COORDINATES_CENTRE_OF_STATEPROVINCE)) +
  pilot::scale_color_pilot() +
  theme(legend.position = "none")

```

Keep in mind that just because an observation's coordinates match a centroid doesn't mean that the observation's location is *generalised* (i.e., made less precise) to the centre of a polygon area. It could be coincidence! If you want to preserve as much data as possible, using other information can help determine if an observation's coordinate location has been generalised or not. For example, the `dataGeneralizations`, `coordinateUncertaintyInMetres` and `locality` fields may offer extra context about whether an observation has been generalised because it is a sensitive record, or whether there is a location that the observation is more broadly associated with.


### Cities, zoos, aquariums, museums & herbaria

Some observations are recorded in locations where animals and plants
live but do not naturally occur. A common example is observations
recorded at public facilities like zoos, aquariums, and botanic gardens.

Other times, observations are recorded in places where specimens of
animals and plants might be stored, but not where they were observed.
Common examples are museums and herbaria.

In some cases, like with records of the Gorse Bitter-pea, these locations can appear suspicious
but not overly obvious. When we map these observations, there is a
tailing distribution of points in Western Australia with several points
located near the west coast of Australia.

::: aside
<img src="https://ala-images.s3.ap-southeast-2.amazonaws.com/store/a/5/d/3/4407a084-d780-4972-84e6-2fb297793d5a/original" class="rounded"/></img>

::: figure-caption
[*Daviesia ulicifolia ruscifolia* flowering.<br>Photo by Warren
Tomlinson CC-BY-NC 4.0
(Int)](https://biocache.ala.org.au/occurrences/fde7691c-37f3-40a0-a2b7-628b0d0240c7)
:::
:::

```{r}
bitter_peas <- bitter_peas |>
  drop_na(decimalLongitude, decimalLatitude) # remove NA values

ggplot() + 
  geom_sf(data = aus) +
  geom_point(data = bitter_peas,
             aes(x = decimalLongitude,
                 y = decimalLatitude),
             colour = "#204466")
```

Suspiciously, if we [Google the coordinates of the Western Australia
Herbarium](https://www.google.com/search?q=western+australia+herbarium+coordinates&sca_esv=3e98302ba505d99d&rlz=1C1GCEB_enAU958AU958&ei=EAHoZaHTI5up2roP_-Wp6AU&ved=0ahUKEwihm_3R9d6EAxWblFYBHf9yCl0Q4dUDCBA&uact=5&oq=western+australia+herbarium+coordinates&gs_lp=Egxnd3Mtd2l6LXNlcnAaAhgCIid3ZXN0ZXJuIGF1c3RyYWxpYSBoZXJiYXJpdW0gY29vcmRpbmF0ZXMyCBAAGIAEGKIEMggQABiABBiiBDIIEAAYiQUYogRI_h5QxgdY1B1wAngAkAEAmAHQAqABvBSqAQUyLTUuNLgBA8gBAPgBAZgCBqAC7AjCAg4QABiABBiKBRiGAxiwA8ICDhAAGIAEGKIEGLADGIsDwgIOEAAYiQUYogQYsAMYiwPCAgYQABgeGA3CAgsQABiABBiKBRiGA8ICCxAAGIAEGKIEGIsDmAMAiAYBkAYHkgcHMi4wLjMuMaAHyys&sclient=gws-wiz-serp),
the coordinates overlap with one of the points. We have highlighted this point in orange.

```{r}
ggplot() + 
  geom_sf(data = aus) +
  geom_point(data = bitter_peas,
             aes(x = decimalLongitude,
                 y = decimalLatitude),
             colour = "#204466") +
  geom_point(aes(x = 115.8, y = -31.9), # point coordinates
             colour = "#f28100") +
  theme(legend.position = "none")
```

Filtering our data to the two left-most data points reveals that the
data resources that supplied those records are both state herbaria.

```{r}
bitter_peas |>
  filter(decimalLongitude < 120) |>
  select(dataResourceName)
```

Having identified this, these records can now be removed from our dataset. 

```{r}
bitter_peas_filtered <- bitter_peas |>
  filter(decimalLongitude > 120)

ggplot() + 
  geom_sf(data = aus) +
  geom_point(data = bitter_peas_filtered,
             aes(x = decimalLongitude,
                 y = decimalLatitude),
             colour = "#204466")
```

::: {.callout-tip collapse="true"}
## Use `basisOfRecord`

You can use the field `basisOfRecord` to avoid including records from
museums and herbaria when creating your query in galah.

```{r}
#| eval: false
library(galah)

# Show values in `basisOfRecord` field
search_all(fields, "basisOfRecord") |>
  show_values()

# Filter basis of record to only human observations
galah_call() |>
  identify("Daviesia ulicifolia") |>
  filter(basisOfRecord == "HUMAN_OBSERVATION") |>
  atlas_counts()
```
:::

<!-- 
## Use expert distributions

*Coming soon...* once galah supports expert distributions...
This section can have an example expert distribution, then plot points on the 
top, then find which points are outside of the distribution to investigate 

One way to identify suspicious observations is to use an expert
distribution to determine whether an occurrence record is within the
possible range of a species. At the most basic, expert distributions can
be found in the literature (like [this one]()), then
compared visually to your points.

It's also possible to download expert distributions as shapefiles, and
these can be plotted on a map to directly compare with your occurrence
record locations.
-->

## Packages

Other packages exist to make identifying and cleaning geospatial coordinates 
more streamlined. The advantage of using these packages is that they can 
run many checks over coordinates at one time, rather than 
identifying each error separately like we did over this chapter. This process 
can make finding possible spatial outliers faster. The disadvantage is that 
checks might be more difficult to tweak compared to manual checks. Manual 
checks can also make the steps you made to clean your data clearer (and easier to 
edit later) in a complete data cleaning workflow. 

Choose the package (or mix of packages and functions) that work best for you and 
your data cleaning needs.

#### CoordinateCleaner

The [CoordinateCleaner
package](https://docs.ropensci.org/CoordinateCleaner/index.html) is a package
for automated flagging of common spatial and temporal errors of biological and
palaentological data. It is particularly useful for cleaning data from GBIF.

Here is an example of a general cleaning function, but there are many
more bespoke options that the package offers.

```{r}
#| warning: false
#| message: false
library(CoordinateCleaner)

# Run record-level tests
coordinate_tests <- clean_coordinates(x = butterflies, 
                                      species = "scientificName")
summary(coordinate_tests)
plot(coordinate_tests)
```

## Summary

Each of the cleaning steps in this chapter do not have to be run in
order, or even at all. Whether they are used is context- and
taxon-dependent. As an example, what is one species that has many
"wrong" coordinates based on many of the steps listed above?

The Great White Shark.

::: aside
<img src="https://ala-images.s3.ap-southeast-2.amazonaws.com/store/5/8/8/5/1b2967ba-5113-43cb-bff0-3ca958c15885/original" class="rounded"/></img>

::: figure-caption
[*Carcharodon carcharias* swimming off the South Australian coast.<br>Photo by Coffin Bay Scuba Co. CC-BY-NC 4.0
(Int)](https://biocache.ala.org.au/occurrences/3be163bd-a0f6-43c5-be0a-46e7b6690924)
:::
:::

```{r}
#| code-fold: true
#| warning: false
#| message: false
#| fig-height: 2.3
# Download occurrence records
sharks <- galah_call() |>
  identify("Carcharodon carcharias") |>
  filter(basisOfRecord == "HUMAN_OBSERVATION") |>
  apply_profile(ALA) |>
  atlas_occurrences()

# Retrieve map of Australia
aus <- st_transform(ozmap_country, 4326)

# Map occurrences
sharks |>
  drop_na(decimalLongitude, decimalLatitude) |>
  ggplot() + 
  geom_sf(data = aus,
          colour = "grey60",
          fill = "white") +
  geom_point(data = sharks,
             aes(x = decimalLongitude,
                 y = decimalLatitude),
             colour = "#135277") +
  theme_light()
```


The difficulty with cleaning Great White Shark occurrence data is that these
sharks have a *massive* habitat range, and these locations along (what appear to
be) the North American coast and Madagascar could very well be true occurrences.
Be sure to consider the taxonomic and spatial range of your species before
jumping into data cleaning!
