# Cleaning biodiversity data

This section covers a range of practical data cleaning techniques, relevant to
biodiversity data. To enhance the efficiency of your data cleaning and
subsequent analysis process, we also recommend becoming familiar with certain
concepts and tools. These aren't required to follow this book, but they can help
streamline your workflows, and reduce the risk of complications later on. 

## Record keeping

Keeping a complete record of your data cleaning steps is crucial and helps to
maintain the integrity of your research. It ensures **transparency** in how the
data were handled and processed, and allows for **reproducibility**, such that
others may replicate your steps to achieve the same outcome. In practice, a
record should include where data were sourced, and any changes made to the
original data, such as correcting errors, removing duplicates, or filtering out
data points. 

## Reproducible workflows

A reproducible workflow is code that given the same inputs, will produce the
same outputs each time, regardless of when or where it is run. Meaning, it
should be portable and work on any machine, without needing to make changes to
the code such as changing local file paths. Reproducible workflows are
recognised as a key component for research practices, and data science
applications in general. 

Utilising notebooks or dynamic documents in R is a great first step towards
reproducible workflows. We recommend using R Markdown, or the next-generation
version called Quarto. These packages provide file formats that allow you to
interleave plain text, code, and outputs, into a single document. Besides being
a powerful way to communicate your work and colaborate with others, they offer a
helpful way to integrate record keeping directly into your cleaning and analysis
process. 

## Version control

Version control refers to the process of tracking and managing changes that are
made to code. We recommend using a version control system like Git, and an
online repository hosting service such as GitHub or GitLab, but there are many
others to choose from. These services host your code files (privately or
publicly), and track every modification made to your code. This is extremely
useful in data cleaning, where you might make many small changes over time. If
you encounter a problem or need to revisit a previous stage of your analysis,
version control allows you to easily revert to earlier versions of your work. It
also offers a safer way for multiple people to work on the same project, or
share code with others.

::: {.callout-caution}
Git is not a backup! It is a very useful version control system, but it is not
advised to use it as a backup system. You should always maintain a separate,
dedicated backup system for your files and data.  
:::

