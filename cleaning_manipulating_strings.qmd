---
output: html_document
editor_options: 
  chunk_output_type: console
---
<!--                              Notes/Andrew:                              -->
<!------------------------------------------------------------------------------
There is content here sourced from taxonomy 1 and 2. 

ISSUE: I didn't have time to change the data used for most of the prexisting
code chunks, but the data used should be clear and reproducible. Before
it was hidden, and some aren't reproducible in a clear way - there is no
information I can see on what the `plants` dataset is, except I see it first
appears in a hidden code chunk in taxonomy 1, but the origin is a csv. It should
be transparent where data comes from or else use galah downloads so its all
visible to user and reproducible.
------------------------------------------------------------------------------->

# Strings

```{r, setup, include=FALSE}
knitr::opts_chunk$set(
  comment = "",
  fig.width = 6,
  fig.height = 6,
  eval = TRUE,
  echo = TRUE,
  warning = FALSE,
  message = FALSE
)
options(tidyverse.quiet = TRUE)
```

```{r, include=TRUE}
# Load in data needed for the chapter
# WORMS dataset
worms <- read.csv("data/worms/worms.csv")
head(worms)
# AFD dataset
afd <- read.csv("data/naming/afd.csv")
# Inverts
inverts <- arrow::open_dataset("data/galah/inverts") |> dplyr::collect()
# Plants
plants <- arrow::open_dataset("data/dap/plants_subset") |> dplyr::collect()
```

```{r}
# Andrew: New example data for this chapter for some parts
library(galah)
galah_config(
  atlas   = "Australia",
  email   = Sys.getenv("ALA_EMAIL")
)
tree_kangaroo <- galah_call() |>
  galah_identify("Dendrolagus") |>
  atlas_occurrences()
```

## Basic string manipulation

The `stringr` package provides a number of useful functions for manipulating
strings, many of which are useful when dealing with biodiversity data. 

```{r}
library(stringr)
str_trim("  Genus specificus  ")
str_trim("  Genus specificus  ", side = "left")
str_squish("  Genus   specificus  ")
str_trunc("Genus specificus", width = 10, side = "right")
str_split("Genus specificus", " ")
str_c("Genus", "specificus", sep = "_")

```

## Matching

Matching strings is a common task when working with biodiversity data. etc etc.

### Basic matching

The `stringr` package provides a number of functions for matching strings using
patterns.

```{r}
# detect and remove
str_detect("Genus specificus", "Genus")
str_remove("Genus specificus", pattern = "Genus ")

# locate and subset
records <- c("Genus", "species", "Genus species", "Difgenus difspecies")
str_locate(records, "Genus")
str_subset(records, "Genus")
```

### Regex matching

The examples above demonstrate the use of basic patterns. But for cases that
need more specific or advanced matching we can use regular expressions (regex).
Regex is a powerful tool used to match patterns in strings, replace characters
in strings, and extract substrings from strings. Regex can be complex and
unintuitive, but there are websites available, such as [Regex
Generator](https://regex-generator.olafneumann.org/), that are extremely
helpful. Here we explore a few basic examples, and keep in mind that these
methods can be applied to both column name strings and column values. In the
case of column names, regex can be useful when conforming datasets (see
[Integration]("./access_integration.qmd")) or to meet a stylistic requirement.
Applied to column values, there is a range of utility, such as unifying the
formatting of taxonomic or location names. 

The `str_view()` function is particularly useful for exploring regular
expressions to see pattern matches. The results are shown in the console, and
elements matched by the regex are surrounded with angle brackets < >. 

```{r}
# Match the first word in the string (the genus)
str_view(tree_kangaroo$scientificName, "^[A-Z][a-z]+")
# Match only the second word (species name)
str_view(tree_kangaroo$scientificName, "(?<=\\s)[a-z]+")
```

### Replacements

In base R the `gsub()` function can be used for pattern replacement. In
`stringr`, the `str_replace()` function can be used to replace the first match
of a string. The `str_replace_all()` function can be used to replace all
matches. 

```{r}
# str_replace() example
```

Base example:

```{r}
tree_kangaroo$scientificName <- gsub(
  pattern = "Dendrolagus",
  replacement = "Newname",
  x = tree_kangaroo$scientificName
)
```

## Case style

Case style can vary across data providers due to variable naming conventions. There are some basic functions available to change the case of strings in `stringr`:

```{r}
str_to_lower(plants$scientific_name[1])
str_to_upper(plants$scientific_name[1])
str_to_title(plants$scientific_name[1])
```

In some cases a more specific detection and replacement is required. For
example, the World Register of Marine Species (WoRMS) uses a combination of
lower case (scientific_name) and camel case (isExtinct). However, the Australian
Fauna Directory (AFD) uses screaming snake case e.g. SCIENTIFIC_NAME. To work
with both, case differences can be conformed to a single style, but the format
you choose is a matter of personal preference. 

<!-- Andrew: This does the same as the original chunk but like 1/4 the size -->
```{r}
worms_small <- head(worms)

# gsub is a base R function for replacing strings
colnames(worms_small) <- sapply(colnames(worms_small), function(name) {
  name <- tolower(gsub("([a-z])([A-Z])", "\\1_\\2", name))
  gsub("^_", "", name)
})

# stringr version of above (with a slightly different regex approach)
colnames(worms_small) <- sapply(colnames(worms_small), function(name) {
  str_to_lower(str_replace_all(name, "(?<=\\p{Ll})(\\p{Lu})", "_\\1"))
})
```

## Simple case study

We will use the `janitor` R package to explore whether our elephant data has any
string issues. The function `tabyl` will compute a counts and percent of total
rows for each unique value.

```{r, eval = TRUE}
library(dplyr)
library(janitor)
african_ele <- arrow::read_parquet("data/gbif/elephant")
african_ele |>
  pull(stateProvince) |>
  tabyl() |>
  tibble() |>
  print(n = 20)
```

From the `tabyl` output, we can see there are few different variations of
`Province`, `Prov.`, `Prov`. As an example, we will correct these with the
`tidyverse` packages `stringr`, `dplyr`, `tidyr` as well as `glue`.

```{r, eval = TRUE, echo = TRUE}
library(glue)
# Create a regular expression to match Prov. and Prov
pattern <- regex("Prov(?![:lower:])")
# Use `str_subset` to pull out the cases that match our pattern
# Confirm that these are the problematic ones
# Assign these into an object
str_subset(african_ele$stateProvince, pattern = pattern)
typos_provinces <- str_subset(african_ele$stateProvince, pattern = pattern)

# Create a new variable `stateProvince_clean`
# `str_detect` for matches of pattern (returns TRUE for match)
# `if_else`: if TRUE, the `glue` function will take the first part of the province name enclosed in and join it with word Province.
# if FALSE , it will just take the corresponding value in stateProvince
# Note that we are assigning these changes to a new object (`african_ele_2`)
african_ele_2 <- african_ele %>%
  mutate(stateProvince_clean = if_else(str_detect(stateProvince, pattern = pattern),
    true = glue('{word(stateProvince, sep = " P")} Province'),
    false = stateProvince
  ))

# Once we've made the correction we want to check we've done it correctly.
# ALWAYS CHECK YOUR CORRECTIONS
# Use the `select` function to isolate columns that `starts_with` "stateProvince"
# Use the `filter` function to subset our the problematic provinces
african_ele_2 %>%
  select(starts_with("stateProvince")) %>%
  filter(stateProvince %in% typos_provinces)

# Its good practice to check the other values were not affected by your corrections
# Here we are removing the NA with `drop_na` and subsetting unique rows with `distinct`
african_ele_2 %>%
  select(starts_with("stateProvince")) %>%
  tidyr::drop_na() %>%
  distinct()

# Final check
# Check with the original code that detected the issue
african_ele_2 %>%
  pull(stateProvince_clean) %>%
  tabyl() %>%
  tibble() %>%
  print(n = 20)
```

There are some other issues that can be corrected in a similar approach:

-   `North West`, `North West District` and `North-Western`
-   `Ã€frica Central`, `Central Province` and `Central`
-   `Atacora` and `Atakora`
-   `Coastal Province` and `Coastal`

We recommend consulting reputable sources to delineate and consolidate
similar values.