---
title: "Untitled"
---

# Case studies

<!-- 
The below is taken from the strings chapter.
-->

---

*Dax's note*

This is a very good case study, and it might be nice to include it, though I don't think it suits an ALA book to be using Elephant data from GBIF. Is there an ALA data equivalent?

## Case study: Cleaning location names

We will use the `janitor` R package to explore whether our elephant data has any
string issues. The function `tabyl` will compute a counts and percent of total
rows for each unique value.

```{r, eval = TRUE}
library(dplyr)
library(janitor)
african_ele <- arrow::read_parquet("../data/gbif/elephant")
african_ele |>
  pull(stateProvince) |>
  tabyl() |>
  tibble() |>
  print(n = 20)
```

From the `tabyl` output, we can see there are few different variations of
`Province`, `Prov.`, `Prov`. As an example, we will correct these with the
`tidyverse` packages `stringr`, `dplyr`, `tidyr` as well as `glue`.

```{r, eval = TRUE, echo = TRUE}
library(glue)
# Create a regular expression to match Prov. and Prov
pattern <- regex("Prov(?![:lower:])")
# Use `str_subset` to pull out the cases that match our pattern
# Confirm that these are the problematic ones
# Assign these into an object
str_subset(african_ele$stateProvince, pattern = pattern)
typos_provinces <- str_subset(african_ele$stateProvince, pattern = pattern)
```

Create a new variable `stateProvince_clean` and use `str_detect` for matches of pattern (returns TRUE for match). `if_else`: if TRUE, the `glue` function will take the first part of the province name enclosed in and join it with word Province. if FALSE , it will just take the corresponding value in `stateProvince`. Note that we are assigning these changes to a new object (`african_ele_2`). 


```{r, eval = TRUE, echo = TRUE}
african_ele_2 <- african_ele %>%
  mutate(stateProvince_clean = if_else(str_detect(stateProvince, pattern = pattern),
    true = glue('{word(stateProvince, sep = " P")} Province'),
    false = stateProvince
  ))
```

Once we've made the correction we want to check we've done it correctly. Use the `select` function to isolate columns that `starts_with` "stateProvince". Use the `filter` function to subset our the problematic provinces.

```{r, eval = TRUE, echo = TRUE}
african_ele_2 %>%
  select(starts_with("stateProvince")) %>%
  filter(stateProvince %in% typos_provinces)
```


It is good practice to check the other values were not affected by your corrections. Here, we are removing the NA with `drop_na` and subsetting unique rows with `distinct`


```{r, eval = TRUE, echo = TRUE}
african_ele_2 %>%
  select(starts_with("stateProvince")) %>%
  tidyr::drop_na() %>%
  distinct()
```

Final check - check with the original code that detected the issue. 

```{r, eval = TRUE, echo = TRUE}
african_ele_2 %>%
  pull(stateProvince_clean) %>%
  tabyl() %>%
  tibble() %>%
  print(n = 20)
```

There are some other issues that can be corrected in a similar approach:

-   `North West`, `North West District` and `North-Western`
-   `Ã€frica Central`, `Central Province` and `Central`
-   `Atacora` and `Atakora`
-   `Coastal Province` and `Coastal`

We recommend consulting reputable sources to delineate and consolidate similar values.

