---
editor: 
  markdown: 
    wrap: 72
code-annotations: hover
number-depth: 3
editor_options: 
  chunk_output_type: console
---

# Column classes & names

Each column in a dataset contains data of a specific class. A class defines the type of data in a column and determines how those data are interpreted in R, and how we can modify those data. For instance, it doesn't make sense to apply a mathematical equation to a word or a sentence. The phrase "hello" doesn't reveal whether something is true or false. Knowing what *types* of data are in each column of your table will ensure those data behave as expected later on. Classes are important to understand (or fix) because, generally, functions will not work if the data type is not compatible. 

Column names can also cause compatibility issues when working with a dataset. Depending on the source of your dataset, existing column names may be uninformative (e.g. `col1`, `tga42.D`), oddly formatted once imported into R (e.g. `How.Much.Soil.Is.In.This.Plot..`), or internally inconsistent (e.g. `species_name`, `scientificName`). Modifying these can make it much easier to work with the data and avoid errors caused by mismatched or confusing column names. 

This chapter explains how to check the class of each column and edit column names so that they are consistent and ready to use for analyses.


### Prerequisites

In this chapter, we will use *Litoria* frog occurrence data since 2020 in Tasmania from the ALA. 

```{r prereq-internal}
#| echo: false
#| warning: false
#| message: false
# packages
library(arrow)
library(galah)
library(dplyr)

galah_config(email = Sys.getenv("ALA_EMAIL"),
             verbose = FALSE)

# get DOIs for chapter
doi_table <- here::here("data", "galah-dois", "doi_table") |>
  arrow::open_dataset() |>
  filter(chapter == "Column classes") |>
  collect()

# extract dois
doi_frogs <- doi_table |> filter(name == "frogs") |> pull(doi)

# download
frogs <- galah_call() |>
  filter(doi == doi_frogs) |>
  atlas_occurrences()
```

```{r prereq-external}
#| echo: false
test <- glue::glue(
"
# packages
library(galah)
library(dplyr)
galah_config(email = \"your-email-here\") # ALA-registered email

frogs <- galah_call() |>
  filter(doi == \"{doi_frogs}\") |>
  atlas_occurrences()
"
)
```

```{r prereq-printed}
#| eval: false
#| code: !expr test
#| echo: true
```


::: aside
<img src="https://ala-images.s3.ap-southeast-2.amazonaws.com/store/2/a/8/f/c3c17ed0-952c-46c5-8de2-0069ff38f8a2/original" class="rounded"/></img>

::: figure-caption
[*Litoria watjulumensis* seated on a rock.<br>Photo by simono CC-BY-NC 4.0 (Int)](https://biocache.ala.org.au/occurrences/44ed2cdd-ab7c-4974-b2fd-6a6394d5cd7b)
:::
:::

<!-- Queries -->

:::{.callout-note collapse="true" appearance="minimal"}

#### Original download queries

**Note:** You don't need to run this code block to read this chapter. It can, however, be useful to see the original download query. This code will download the latest data from the ALA, which you are welcome to use instead, though the data might not exactly reproduce results in this chapter.

```{r prereq-orig-query}
#| eval: false
library(galah)
galah_config(email = "your-email-here")

frogs <- galah_call() |>
  identify("Litoria") |>
  filter(year >= 2020, 
         cl22 == "Tasmania") |>
  select(group = "basic",
         genus, species) |>
  atlas_occurrences() # <1>
```
1. We created a custom DOI for our download by using `atlas_occurrences(mint_doi = TRUE)`.

:::

## Column classes

Columns define what type of data they contain by having a class, and it's important to know what these classes are because R handles each class differently.

Viewing your data using functions we introduced in the [Inspect chapter](../1_exploring/inspect.qmd) allows you to get a quick overview of each column's class.

:::{.panel-tabset .nav-pills}

#### `glimpse()`

Using `glimpse()` displays the class beside each column name (e.g. <*chr*>)

```{r}
library(dplyr)

glimpse(frogs)
```

#### `str()`

Using `str()` displays the class after the column name and before the number of rows (e.g. `chr`)

```{r}
str(frogs)
```

#### `skim()`

The `skim()` function groups columns by their type/class.

```{r}
#| message: false
#| warning: false
library(skimr)

skim(frogs)
```

#### `sapply()`

You can return the class of every column using `sapply()` from base R.

```{r}
sapply(frogs, class)
```

#### `map()`

You can return the class of every column using `map()` from the purrr package.

```{r}
#| message: false
#| warning: false
library(purrr)

frogs |>
  purrr::map(class)
```

:::

If you are using a `tibble`, the class is also displayed below each column name when you view your table. Depending on whether your output is in the console or inline, your tibble may be formatted as a paged table in R Studio.

::: {.panel-tabset .nav-pills}

#### Console

```{r}
frogs
```

#### Inline

```{r}
frogs |> rmarkdown::paged_table()
```

:::

::: {.callout-note collapse="false"}
## Our data classes:

From these quick overviews of the data, we've learned:

  *  Column `scientificName` is strings of text (type `character`)
  *  Columns `decimalLatitude` and `decimalLongitude` are numbers with decimal points (type `double`)
  *  The `eventDate` column contains a date + time (type `POSIXct`/`dttm`)
  *  Columns like `recordID` and `taxonConceptID` contain both text and numbers, but are of type `character` because this type prevents any loss of data[^column-names-and-classes-2].
  
[^column-names-and-classes-2]: To avoid conflicts, R has an internal coercion hierarchy rule to avoid data loss. The rule of thumb is that if a data type can't exist in a child data type, then the parent data type is used instead. The R coercion hierarchy is:<br>  `logical` `->` `integer` `->` `numeric` `->` `complex` `->` `character`<br><br>You don't need to memorise this, but it's worth being aware of this hierarchy, as R might make decisions to prevent a class error and you might not know why! [Learn more in this article](https://annakrystalli.me/rrresearchACCE20/data-types-structures-and-classes.html).
  
:::

Here, the column classes are what we'd expect given the types of data in each column. However, this is not always the case. 

For instance, changing just one of the values in `decimalLatitude` from its assigned `numeric` value to a "degrees minutes seconds" format causes the entire column class to be changed to `character` to prevent loss of data.


```{r}
# duplicate data
frogs_class <- frogs

# check class
class(frogs_class$decimalLatitude)

# change one of the values to a degrees minutes seconds format
frogs_class$decimalLatitude[5] <- "40Â° 51' 59 N"

# check class
class(frogs_class$decimalLatitude)
```

::: {.callout-warning collapse="true"}
## Look out for typos

A simple typo in the dataset you import into R could be all it takes to change the class of an entire column, so be sure to keep your eyes out for strange column classes!
:::

## Column names

There are many reasons why you might need to change the name of one or more columns in a table. We've outlined a few of the more common use cases here. 

### Make column names consistent

Column names should use consistent naming conventions. R is case sensitive, so two names with the same letters but different capitalisations are considered different names (e.g. `event` vs. `Event`). Using a consistent naming convention, like camel case or snake case, makes it easier to avoid these errors. Common naming formats include "snake case" and "camel case", which are popular because they are both human- and machine-readable. 

**Camel case** begins in lowercase and uses uppercase for the first letter of every subsequent word (e.g. `scientificName`, `dataResourceName`, `eventDate`).  

**Snake case** uses lowercase letters only, with words separated by an underscore `_` (e.g. `scientific_name`, `data_resource_name`, `event_date`).  

Snake case is more popular in R, and is the naming convention we recommend. Data downloaded from the ALA is in camel case[^column-names-and-classes-1].

[^column-names-and-classes-1]: Queries to the ALA use other coding languages, namely `solr` and `JSON`, and column names in these languages are typically in camel case. To maintain consistency with what's in the ALA and to avoid hidden name cleaning, galah also returns names in camel case.

```{r}
colnames(frogs)
```

One of the most useful column name cleaning functions is `clean_names()` from the [janitor package](https://cran.r-project.org/web/packages/janitor/vignettes/janitor.html). This function will make all of your column names consistent, based on your preferred naming convention (defaults to snake case). 

```{r}
#| warning: false
#| message: false
library(janitor)

frogs_clean <- frogs |>
  clean_names() |>
  colnames()
frogs_clean
```

Now our names are in a consistent `snake_case` format.

```{r}
#| code-fold: true
frogs |>
  clean_names() |>
  rmarkdown::paged_table() # nice format
```

::: aside
<img src="https://ala-images.s3.ap-southeast-2.amazonaws.com/store/e/e/4/8/53fabae9-22c2-448d-9352-bc7cf9e584ee/original" class="rounded"/></img>

::: figure-caption
[*Litoria ewingii* nestled in the mud. <br>Photo by george_vaughan CC-BY-NC 4.0 (Int)](https://biocache.ala.org.au/occurrences/157896a8-868c-4e5f-87f1-d6063450c624)
:::
:::


### Rename columns

Renaming columns is a frequent data cleaning task. Column names might need renaming to make it clearer what data they contain, or to make a name consistent with another dataset prior to merging their contents.

There are several ways to rename columns in R.

<!-- 
I am undecided about hiding the paged_table() step from the user 

On one hand, if you are using R Studio + Quarto, this is probably how it renders anyway
On the other hand, people might wonder why the output looks different? I'm not sure.
- DK


Update: I decided to stick with the code look, not html table, in the below sections because I don't think the extra step to make the table html was 
necessary. I did apply it to later examples because I thought it improved readability
- DK
-->

::: {.panel-tabset .nav-pills}
#### `rename()`

`dplyr::rename()` provides an easy way to rename one or more columns.

```{r}
#| df-print: paged

frogs |>
  select(decimalLatitude, decimalLongitude) |>
  rename(latitude = decimalLatitude,
         longitude = decimalLongitude) 
```

`rename_with()` is a more powerful version of `rename()`. It allows more advanced renaming by using functions to rename matching columns. Here we convert column names starting with "decimal" to uppercase.

```{r}
frogs |>
  select(decimalLatitude, decimalLongitude) |>
  rename_with(toupper, starts_with("decimal"))
```

And here we append the prefix "new_" to columns with names containing "decimal", and convert them to lowercase.

```{r}
frogs |>
  select(decimalLatitude, decimalLongitude) |>
  rename_with( ~ tolower(gsub("decimal", "new_", .x, fixed = TRUE))) # <1>
```
1. `.x` is shorthand for the variable this function will be applied to. In this case, `.x` refers to our `frogs` data frame.


#### `names()` + `<-`

Index a specific column name in base R with the help of `names()`. Assign a new column name to replace an old column name using the assign operator `<-`.

```{r}
names(frogs)[names(frogs) == "decimalLatitude"] <- "latitude"
names(frogs)[names(frogs) == "decimalLongitude"] <- "longitude"

frogs[,c("latitude", "longitude")]
```

```{r}
#| echo: false
names(frogs)[names(frogs) == "latitude"] <- "decimaLatitude"
names(frogs)[names(frogs) == "longitude"] <- "decimalLongitude"
```

:::

### Separate columns

Sometimes it is useful to split information from one column into several columns. One good example is if genus and species names are contained in one column like `scientificName`. We can separate these names into two columns using `separate()` from the tidyr package.

```{r}
#| warning: false
#| message: false
library(tidyr)

frogs_separate <- frogs |>
  separate(scientificName, 
           c("genus", "species"), # new column names
           fill = "right",        # fill missing values in right column
           remove = FALSE         # keep input column
           ) |> 
  select(scientificName, genus, species)

frogs_separate |> rmarkdown::paged_table() # nice format
```




### Join columns

Conversely, we might want to combine information from multiple columns into a single column. We can rejoin the `genus` and `species` columns we created in the previous section using `unite()` from the tidyr package.

```{r}
frogs_united <- frogs_separate |>
  unite("single_name", 
        genus:species, # select columns to join
        sep = " ",     # separate with a space
        na.rm = TRUE,  # remove NA values
        remove = FALSE # keep input column
        ) |>
  select(genus, species, single_name)

frogs_united |> rmarkdown::paged_table() # nice format
```

::: aside
<img src="https://ala-images.s3.ap-southeast-2.amazonaws.com/store/1/3/a/7/c5363580-9cee-4a4c-8ae9-1dafdc157a31/original" class="rounded"/></img>

::: figure-caption
[*Litoria raniformis* close-up <br>Photo by sonyaf CC-BY-NC 4.0 (Int)](https://biocache.ala.org.au/occurrences/ce795264-ebec-4e57-9ff4-e3f91440a747)
:::
:::

## Summary

In this chapter, we've explored different ways to check the class of each column in your table to make sure R is interpreting your data correctly. We also showed how to change column names to make it easier to work with them and to split or combine columns to access data more conveniently. 

In the next chapter we will learn to efficiently clean **duplicate** data. Duplicates might occur due to mistakes in data collection or entry, or, from merging data from multiple sources. 
