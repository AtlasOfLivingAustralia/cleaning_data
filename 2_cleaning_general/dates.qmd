---
editor_options: 
  chunk_output_type: console
editor: 
  markdown: 
    wrap: 72
---

# Dates

Dates can be formatted in *a lot* of different ways in datasets. Here are just a few
examples:

-   `"2020-10-11T14:02:00"`
-   `"11 October 2020"`
-   `"10/11/2020"`

Sometimes multiple date formats are within one data set, especially if
one data set combines data from more than one source. Usually you will
need to extract several different types of information using dates, like
the week number or the interval of time between two dates. You may also
need to use dates and times to filter or clean your data set.

In this chapter, we provide some basic functions for cleaning dates and
times. We also show how to reformat and filter your data set using
dates.

For a more detailed explanation of handling dates and times in R, 
the [R for Data Science book](https://r4ds.hadley.nz/datetimes.html) is a great resource.[CITE]

<!-- 
Add this citation to references.bib

Wickham, H., Çetinkaya-Rundel, M., & Grolemund, G. (2023). R for Data Science: Import, Tidy, Transform, Visualize, and Model Data. O’Reilly.
-->

### Prerequisites

In this chapter, we will use *Grevillea* (aka spider flower) occurrence
data from the ALA.

```{r}
#| warning: false
#| message: false
#| echo: false
# packages
library(galah)
library(dplyr)
galah_config(email = Sys.getenv("ALA_EMAIL"),
             verbose = FALSE)
plants <- galah_call() |>
  identify("grevillea") |>
  atlas_occurrences()
```

```{r}
#| eval: false
# packages
library(galah)
library(dplyr)

# data: grevillea records
galah_config(email = "your-email-here")

plants <- galah_call() |>
  identify("grevillea") |>
  atlas_occurrences()
```

::: aside
<img src="https://ala-images.s3.ap-southeast-2.amazonaws.com/store/c/8/a/8/9fc9b089-9cb5-401b-bbe4-bf40c12f8a8c/original" class="rounded"/></img>

::: figure-caption
[*Grevillea acanthifolia* flowering.<br>Photo by porcoespinho15 CC-BY-NC
4.0
(Int)](https://biocache.ala.org.au/occurrences/a664db4b-1762-4f5c-96eb-b6a52df5d27d)
:::

:::

## Basic date manipulation

One of the most useful data cleaning packages for dates is the lubridate
package. Below are some examples of common date cleaning functions. You
can find more at the [lubridate package
website](https://r4ds.hadley.nz/datetimes.html).

```{r}
#| warning: false
#| message: false
library(lubridate)
```


### Reformat

The lubridate package is incredibly good at reformatting dates written in many different styles to *YYYY-MM-DD* format. Here are a few examples.

```{r}
date("2017-10-11T14:02:00")
dmy("11 October 2020")
mdy("10/11/2020")
```

Sometimes dates are presented in formats that do not translate cleanly
into R. For example, the following date format isn't converted correctly
when we try to convert it to a date.

```{r}
df <- tibble(
  date = c("X2020.01.22",
           "X2020.01.22",
           "X2020.01.22",
           "X2020.01.22")
)

df |> 
  mutate(
    date = as_date(date)
  )
```

We can use `%` to be more explicit about what information is in each
part of our date column, specifying where the 4-digit year (`%Y`),
2-digit month (`%m`) and 2 digit day (`%d`) are within each string. 
Learn more about date formats in the [dates chapter in R for Data Science](https://r4ds.hadley.nz/datetimes.html#tbl-date-formats).

```{r}
df |> 
  mutate(
    date = as_date(date, format = "X%Y.%m.%d")
  )
```

### Extract

The lubridate package is also very good at extracting specific information from a longer date. This is very useful for summarising, filtering or plotting.

#### Date information

```{r}
year("2017-11-28T14:02:00")
month("2017-11-28T14:02:00")
week("2017-11-28T14:02:00")
day("2017-11-28T14:02:00")
```

### Time information

```{r}
ymd_hms("2017-11-28T14:02:00")
ymd_hms("2017-11-28T14:02:00", tz = "Australia/Melbourne")
ymd_hms("2017-11-28T14:02:00") |> hour()
ymd_hms("2017-11-28T14:02:00") |> minute()
am("2017-11-28T14:02:00")
pm("2017-11-28T14:02:00")
```

### An example using galah

Data downloaded using the [galah](https://galah.ala.org.au/) package is loaded into R as date and
time data (class `POSIXct`). As a result, you can immediately begin
extracting date information using the functions above.

```{r}
plants |>
  mutate(
    year = year(eventDate),
    month = month(eventDate),
    week = isoweek(eventDate),
    day_julian = yday(eventDate)
    ) |>
  select(eventDate, year, month, 
         week, day_julian)
```

::: aside
<img src="https://images.ala.org.au/image/details?imageId=b64f6e42-3ba9-4cd2-951b-b55fb9ea0386" class="rounded"/></img>

::: figure-caption
[*Grevillea acanthifolia* just beginning to flower.<br>Photo by Fagg, M. CC-BY
4.0
(Int)](https://biocache.ala.org.au/occurrences/b5adbb1c-a21e-4f29-b7ca-869335c7cb38)
:::

:::

## Filter

We can filter datasets to include or exclude data from certain dates or date ranges.   

```{r}
# return records after 2015
plants |>
  filter(eventDate >= ymd("2016-01-01"))
```

```{r}
# return records between 2015 & 2018
plants |> 
  filter(eventDate >= ymd("2016-01-01") & 
           eventDate <= ymd("2017-12-31"))
```

## Summary

In this chapter, we provided an introduction to common functions for cleaning
dates and times for ecological data sets. For some data cleaning tasks, you may need to find more advanced workflows for more bespoke date and time formatting.

In the next chapter, we look at issues that require more advanced ecological data cleaning techniques.
