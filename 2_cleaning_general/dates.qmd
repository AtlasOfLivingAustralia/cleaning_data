---
editor_options: 
  chunk_output_type: console
editor: 
  markdown: 
    wrap: 72
---

# Dates

Dates can be formatted in *a lot* of different ways. Here are just a few
examples:

-   `"2020-10-11T14:02:00"`
-   `"11 October 2020"`
-   `"10/11/2020"`

Sometimes multiple date formats are within one data set, especially if
one data set combines data from more than one source. Usually you will
need to extract several different types of information using dates, like
the week number or the interval of time between two dates. You may also
need to use dates and times to filter or clean your data set.

In this chapter, we provide some basic functions for cleaning dates and
times. We also show how to reformat and filter your data set using
dates.

For a more detailed explanation of handling dates and times in R, see
the [R 4 Data Science book](https://r4ds.hadley.nz/datetimes.html).

### Prerequisites

In this chapter, we will use *Grevillea* (aka spider flower) occurrence
data.

```{r}
#| warning: false
#| message: false
#| echo: false
# packages
library(galah)
library(dplyr)
galah_config(email = Sys.getenv("ALA_EMAIL"),
             verbose = FALSE)
plants <- galah_call() |>
  identify("grevillea") |>
  atlas_occurrences()

birds <- galah_call() |>
  identify("alcedinidae") |>
  filter(year == 2022) |>
  select(group = "basic", 
         family, genus, species, 
         cl22, eventDate, year) |>
  atlas_occurrences()
```

```{r}
#| eval: false
# packages
library(galah)
library(dplyr)

# data: grevillea records
galah_config(email = "your-email-here")

plants <- galah_call() |>
  identify("grevillea") |>
  atlas_occurrences()

birds <- galah_call() |>
  identify("alcedinidae") |>
  filter(year == 2022) |>
  select(group = "basic", 
         family, genus, species, 
         cl22, eventDate, year) |>
  atlas_occurrences()
```

::: aside
<img src="https://ala-images.s3.ap-southeast-2.amazonaws.com/store/c/8/a/8/9fc9b089-9cb5-401b-bbe4-bf40c12f8a8c/original" class="rounded"/></img>

::: figure-caption
[*Grevillea acanthifolia* flowering.<br>Photo by porcoespinho15 CC-BY-NC
4.0
(Int)](https://biocache.ala.org.au/occurrences/a664db4b-1762-4f5c-96eb-b6a52df5d27d)
:::

<img class = "rounded" src="https://ala-images.s3.ap-southeast-2.amazonaws.com/store/2/5/1/d/9525c6da-fd47-41fa-8eff-55c6747ed152/original"></img>

::: {.figure-caption}
[*Todiramphus (Todiramphus) sanctus* perched on a branch. Photo by Kerri-Lee Harris CC-BY-NC 4.0
(Int)](https://biocache.ala.org.au/occurrences/77b8aac0-18af-4ec6-a03c-ff825859a6f3)
:::

:::

## Basic date manipulation

One of the most useful data cleaning packages for dates is the lubridate
package. Below are some examples of common date cleaning functions. You
can find more at the [lubridate package
website](https://r4ds.hadley.nz/datetimes.html).

```{r}
#| warning: false
#| message: false
library(lubridate)
```


### Reformat

The lubridate package is incredibly good at reformatting dates written in many different styles to *YYYY-MM-DD* format. Here are a few examples.

```{r}
date("2017-10-11T14:02:00")
dmy("11 October 2020")
mdy("10/11/2020")
```

Sometimes dates are presented in formats that do not translate cleanly
into R. For example, the following date format isn't converted correctly
when we try to convert it to a date.

```{r}
df <- tibble(
  date = c("X2020.01.22",
           "X2020.01.22",
           "X2020.01.22",
           "X2020.01.22")
)

df |> 
  mutate(
    date = as_date(date)
  )
```

We can use `%` to be more explicit about what information is in each
part of our date column, specifying where the 4-digit year (`%Y`),
2-digit month (`%m`) and 2 digit day (`%d`) are within each string.
Learn more about date formats in the [R 4 Data Science
book](https://r4ds.hadley.nz/datetimes.html#tbl-date-formats)
<!-- This needs a citation too -->.

```{r}
df |> 
  mutate(
    date = as_date(date, format = "X%Y.%m.%d")
  )
```

### Extract

The lubridate package is also very good at extracting specific information from a longer date. This is very useful for summarising, filtering or plotting.

#### Date information

```{r}
year("2017-11-28T14:02:00")
month("2017-11-28T14:02:00")
week("2017-11-28T14:02:00")
day("2017-11-28T14:02:00")
```

### Time information

```{r}
ymd_hms("2017-11-28T14:02:00")
ymd_hms("2017-11-28T14:02:00", tz = "Australia/Melbourne")
ymd_hms("2017-11-28T14:02:00") |> hour()
ymd_hms("2017-11-28T14:02:00") |> minute()
am("2017-11-28T14:02:00")
pm("2017-11-28T14:02:00")
```

### An example using galah

Data downloaded using the galah package is loaded into R as date and
time data (class `POSITct`). As a result, you can immediately begin
extracting date information using the functions above.

```{r}
plants |>
  mutate(
    year = year(eventDate),
    month = month(eventDate),
    week = isoweek(eventDate),
    day_julian = yday(eventDate)
    ) |>
  select(eventDate, year, month, 
         week, day_julian)
```


## Filter

We can filter ALA data to within a specific date.

```{r}
# return records after 2015
plants |>
  filter(eventDate >= ymd("2016-01-01"))
```

```{r}
# return records between 2015 & 2018
plants |> 
  filter(eventDate >= ymd("2016-01-01") & 
           eventDate <= ymd("2017-12-31"))
```

### Filter before download

In galah, you can filter data very similarly but before you download <!-- is this worth including? -->



## Summary

In this chapter, we provided examples of common functions for cleaning
dates and times for ecological data sets.

In the next chapter...


---

## Recycle bin

<!-- 
This was originally in the "unexpected-values" chapter, which was disbanded because most sections fit in other chapters.
This section doesn't quite fit in this chapter, but it's an interesting thing. Probably not work including here (or at all)?
-->

## Unexpected time

Sometimes, although the correct filters were used to download a data set, some unexpected values can sneak through and require cleaning. These unexpected values can happen when processes used to clean or categorise data by a data provider or data infrastructure miss a few values. Missed values might have been mis-entered originally, fixed incorrectly or undetected.

For example, recall that we filtered our data download query to `year == 2022` using galah ([@sec-prereq]). If we look at the `year` field returned by galah, it looks like our data is only from 2022.

```{r}
birds |>
  distinct(year)
```

However, we can use the `eventDate` field to double check this is true. Let's extract year from `eventDate` by using the `year()` function from the lubridate package.

```{r}
#| warning: false
#| message: false
library(lubridate)

birds_dates <- birds |>
  mutate(date = date(eventDate), # <1>
         year_extracted = year(eventDate))

birds_dates |>
  select(date, year_extracted)
```
1. We first convert values in the `eventDate` column to a `date` class. The lubridate package is very good at reading dates in *many* different formats and standardising them into a "yyyy-mm-dd" format. After this conversion, dates can be handled correctly (and more easily) by the lubridate package.

Despite specifying the year in our galah query, when we summarise our new `year_extracted` column, we find that there are other unexpected records from 2021, too!

```{r}
birds_dates |>
  group_by(year_extracted) |>
  count()
```

Viewing these records' `eventDate` shows that each of them occurred on New Year's Eve in 2021---on the cusp of 2022. For some unknown reason they still slipped through into our galah data query.

```{r}
birds_dates |>
  filter(year_extracted == 2021) |>
  select(eventDate, date, year, year_extracted)
```

As we are only interested in records from 2022, we can filter these unexpected 2021 records out of our data set.

```{r}
birds_filtered <- birds_dates |>
  filter(year_extracted == 2022)
```