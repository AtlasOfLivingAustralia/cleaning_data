---
editor: 
  markdown: 
    wrap: 72
code-annotations: hover
number-depth: 3
editor_options: 
  chunk_output_type: console
---

# Biological filtering

<!--
This chapter feels more like an exercise in filtering than a true data cleaning chapter. I imagine many people have many needs, but a lot of these examples show how to build a query rather than how 
-->

### Prerequisites

In this chapter we will use several datasets:

  * a subset of plant occurrence records taken from the [Curated Plant and Invertebrate Data for Bushfire Modelling data set](https://data.csiro.au/collection/csiro:56679)

```{r}
#| message: false
#| warning: false
library(readr)
library(dplyr)
library(tidyr)
library(stringr)
library(janitor)
library(galah)
library(here)

galah_config(email = Sys.getenv("ALA_EMAIL"),
             username = Sys.getenv("GBIF_USERNAME"),
             password = Sys.getenv("GBIF_PWD"),
             verbose = FALSE)

plants <- arrow::open_dataset("../data/dap/plants_subset") |> 
  dplyr::collect()
```

:::{.aside}

<img class = "rounded" src="https://ala-images.s3.ap-southeast-2.amazonaws.com/store/0/5/6/a/ca48dfdd-15b3-4ac5-a392-cf5f93a6a650/original"></img>

::: {.figure-caption}
[*Paralaoma mucoides* on a rock.<br>Photo by Nick Porch CC-BY-NC 4.0 (Int)](https://biocache.ala.org.au/occurrences/8a44a8df-2819-45d4-b8c5-e6dc7629e0fe)
:::

:::

## Filter using species list

Many investigations use a taxonomic list of species or groups to identify which species are relevant. A common example is using a list of introduced or invasive species to filter relevant occurrence records. Alternatively, its also common to use threatened or sensitive species list to identify native species of interest.

Let's see how to filter records that match a species list using galah and an external list.

#### Using galah

The ALA contains national and state-based conservation status lists. For example, if we wanted to use the Victorian Restricted Species list, we can do a text search for available lists for "victoria" using `search_all(lists, "victoria")`.

```{r}
list_search <- search_all(lists, "victoria")
list_search
```

Filtering our result to only authoritative lists can help us find official state lists.

```{r}
list_search |> 
  filter(isAuthoritative == TRUE)
```

Now that we have found our desired list, we can return its contents by using `show_values()`.

```{r}
vic_species_list <- search_all(lists, "dr490") |> # <1>
  show_values()

vic_species_list
```
1. We are using the list ID `dr490` (specified in the `species_list_uid` column) to make sure we return the correct list

Now we can use our `vic_species_list` to identify any restricted species by matching names in `vic_species_list` to names in our `plants` data.

<!-- This example needs to use different plants data -->

```{r}
plants_filtered <- plants |>
  filter(!scientific_name %in% vic_species_list$scientificName)

plants_filtered
```

This process has removed xxx records from our data.

```{r}
nrow(plants) - nrow(plants_filtered)
```

We can also filter our queries *prior* to downloading data in galah by adding a filter specifying `species_list_uid == dr490` to our query.

```{r}
galah_call() |>
  identify("plantae") |>
  filter(species_list_uid == dr490) |> # <1>
  group_by(species) |>
  atlas_counts()
```
1. We are using the list ID `dr490` (specified in the `species_list_uid` column) to make sure we return the correct list

#### Using an external list

We can also use lists downloaded outside of galah to filter our data. 
As an example, let's filter our taxonomic names to only Australian names on the 
[Global Register of Introduced and Invasive Species
(GRIIS)](https://griis.org/download). After downloading this list and saving 
it in your working directory, we can read the list into R. Taxonomic names 
are held in columns with an `accepted_name` prefix.

```{r}
#| eval: false
griis <- read_csv(here("GRIIS_Australia_20230331-121730.csv"))

glimpse(griis)
```

```{r}
#| warning: false
#| message: false
#| echo: false
library(dplyr)
griis <- read_csv(here("data", 
                       "lists", 
                       "GRIIS_Australia_20230331-121730.csv"))
glimpse(griis)
```

Now we can check which species names in `griis` match species names in our `plants` data.

```{r}
# Check which species matched the GRIIS list
matches <- plants |> 
  filter(scientific_name %in% griis$accepted_name.species)

matches
```

After looking through the matches and confirming we are happy with the list of matched species, we can exclude these taxa from our data, removing the rows identified above.

```{r}
plants_filtered <- plants |>
  filter(!scientific_name %in% matches)

plants_filtered
```

::: callout-tip
You can apply this concept of filtering to any list of species, or other
fields, that you would like to exclude.
:::



## Extinct species

<!-- 
This is an incredibly complex example that I think comes from Fonti's Inverts Australia work. Impressive as it is, are we definite that it's worth the effort to include it? How many people want to know how to do this?
It's not helped that the IUCN example no longer works.
-->

<!-- 
My new opinion is...the same. This is such a complex example that might be too difficult to demonstrate given this might be the only relevant example in this chapter. And it requires 2 datasets we have to load locally. If it stays, it needs tweaking.
-->

In most cases, filtering data to a recent year range (e.g., > 2010) should
remove *most* extinct species. Nevertheless, it can be important to cross
check for extinct species. 

As an example, we can do this using the Interim Register of
Marine and Nonmarine Genera [(IRMNG)](https://www.irmng.org/), a list which 
compiles both living and extinct biota into a single list. The list
is comprehensive and actively maintained. However, much of the data
doesn't go down to species level. As such, we recommend using the
following approach to find *potentially extinct* taxa and further
investigate the records that are flagged.

The required files are organised by year and can be downloaded from
[here](https://www.irmng.org/export/) then unzipped within your project
directory. We'll read them into R using arrow (see [Large Datasets](LINK to chapter)).

```{r}
irmng_taxa <- arrow::open_dataset(here("data", "lists", "IRMNG_genera_DwCA_2023-05-19", "taxon_subset")) |>
  collect() |>
  as_tibble()

irmng_sp <- arrow::open_dataset(here("data", "lists", "IRMNG_genera_DwCA_2023-05-19", "speciesprofile")) |>
  collect() |>
  as_tibble()
```


```{r}
# download data
inverts <- arrow::open_dataset(here("data", "galah", "inverts")) |> collect()

cleaned_irmng_taxa <- irmng_taxa |>
  filter(taxonomicStatus == "accepted") |> # Filter to accepted names
  filter( # Filter to Animal and plants - change if working with other kingdoms
    kingdom %in% c("Animalia", "Plantae"),
    kingdom != "Questionable / non-biota (fossil)"
  ) |> 
  mutate(
    class = class |>
      str_remove(" \\(awaiting allocation\\)") |>
      str_remove(" incertae sedis")
    )
  
# Join with species profile, remove pesky values and filter to extinct taxa
extinct_irmng <- irmng_taxa |>
  left_join(irmng_sp, by = "taxonID") |>
  filter(scientificName != "Questionable / non-biota (fossil)") |>
  filter(isExtinct == TRUE)

# Summary of extinct species by taxonRank
extinct_irmng$taxonRank |> janitor::tabyl()

# Create genus
inverts_2 <- inverts |>
  mutate(genus = word(scientificName, 1))

# Extract unique extinct genus and remove genus that have punctuation in them
extinct_genus <- extinct_irmng |>
  tidyr::drop_na(genus) |>
  filter(!str_detect(genus, regex("[:punct:]"))) |>
  pull(genus) |>
  unique()

# Check if there are any matches at genus level
inverts_2 |>
  filter(str_detect(genus, pattern = regex(paste0(extinct_genus, collapse = "|")))) |>
  pull(scientificName) |>
  unique()
```

<!-- Originally, the below section used an R package to interact with the IUCN API, but this functionality has since been blocked -->

The IUCN also provides lists of extinct species
that are in their database. See the [IUCN](LINK) for
more information.


## Summary

...something