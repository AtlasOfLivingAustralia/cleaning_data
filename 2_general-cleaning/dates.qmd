---
editor: 
  markdown: 
    wrap: 72
code-annotations: hover
number-depth: 3
---

# Dates

Information about dates and times can be formatted in many different ways in datasets. For example, you might encounter:

-   `"2020-10-11T14:02:00"`
-   `"11 October 2020"`
-   `"10/11/2020"`

It's common to find multiple date formats within a single dataset, especially when combining data from various sources. Often, you'll need to extract different types of information from dates, such as the week number or the interval between two dates. You may also need to filter your dataset by dates or times. 

In this chapter, we'll introduce some basic functions for cleaning dates and times. We'll also demonstrate how to reformat and filter your dataset using dates.

For a more comprehensive guide on handling dates and times in R, 
the [Dates and Times chapter](https://r4ds.hadley.nz/datetimes.html) in *R for Data Science* is a fantastic resource.

### Prerequisites

In this chapter, we will use Spider flower (*Grevillea*) occurrence
records in the ALA.

```{r prereq-internal}
#| echo: false
#| warning: false
#| message: false
# packages
library(galah)
library(dplyr)
galah_config(email = Sys.getenv("ALA_EMAIL"),
             verbose = FALSE)

# get DOIs for chapter
doi_table <- here::here("data", "galah-dois", "doi_table") |>
  arrow::open_dataset() |>
  filter(chapter == "Dates") |>
  collect()

# extract dois
doi_plants <- doi_table |> filter(name == "plants") |> pull(doi)

# download
plants <- galah_call() |>
  filter(doi == doi_plants) |>
  atlas_occurrences()
```

```{r prereq-external}
#| echo: false
test <- glue::glue(
"
# packages
library(galah)
library(dplyr)
galah_config(email = \"your-email-here\") # ALA-registered email

plants <- galah_call() |>
  filter(doi == \"{doi_plants}\") |>
  atlas_occurrences()
"
)
```

```{r prereq-printed}
#| eval: false
#| code: !expr test
#| echo: true
```

::: aside
<img src="https://ala-images.s3.ap-southeast-2.amazonaws.com/store/c/8/a/8/9fc9b089-9cb5-401b-bbe4-bf40c12f8a8c/original" class="rounded"/></img>

::: figure-caption
[*Grevillea acanthifolia* flowering.<br>Photo by porcoespinho15 CC-BY-NC
4.0
(Int)](https://biocache.ala.org.au/occurrences/a664db4b-1762-4f5c-96eb-b6a52df5d27d)
:::
:::

<!-- Queries -->
:::{.callout-note collapse="true" appearance="minimal"}

#### Original download queries

**Note:** You don't need to run this code block to read this chapter. It can, however, be useful to see the original download query. This code will download the latest data from the ALA, which you are welcome to use instead, though the data might not exactly reproduce results in this chapter.

```{r prereq-orig-query}
#| eval: false
library(galah)
galah_config(email = "your-email-here")

plants <- galah_call() |>
  identify("grevillea") |>
  atlas_occurrences() # <1>
```
1. We created a custom DOI for our download by using `atlas_occurrences(mint_doi = TRUE)`.

:::

## Basic date manipulation

One of the most useful data cleaning packages for dates is the [lubridate
package](https://lubridate.tidyverse.org). Below are some examples of common date cleaning functions. 
```{r}
#| warning: false
#| message: false
library(lubridate)
```


### Reformat

We can use functions in the lubridate package to reformat dates written in different ways to *YYYY-MM-DD* format.

```{r}
date("2017-10-11T14:02:00")
dmy("11 October 2020")
mdy("10/11/2020")
```

Sometimes dates are presented in formats that do not translate cleanly
into R. For example, the following date format isn't converted correctly
when we try to convert it to a date.

```{r}
#| warning: true
df <- tibble(
  date = c("X2020.01.22",
           "X2020.01.22",
           "X2020.01.22",
           "X2020.01.22")
)

df |> 
  mutate(
    date = as_date(date)
  )
```

We can use `%` to be more explicit about what information is in each
part of our date column, specifying where the 4-digit year (`%Y`),
2-digit month (`%m`) and 2 digit day (`%d`) are within each string. 
Learn more about date formats in the [dates chapter in R for Data Science](https://r4ds.hadley.nz/datetimes.html#tbl-date-formats).

```{r}
df |> 
  mutate(
    date = as_date(date, format = "X%Y.%m.%d")
  )
```

### Extract

Sometimes we might need to extract certain elements of a longer date-time value for summarising, filtering, or plotting data. 

#### Date information

```{r}
year("2017-11-28T14:02:00")
month("2017-11-28T14:02:00")
week("2017-11-28T14:02:00")
day("2017-11-28T14:02:00")
```

#### Time information

```{r}
ymd_hms("2017-11-28T14:02:00")
ymd_hms("2017-11-28T14:02:00", tz = "Australia/Melbourne")
ymd_hms("2017-11-28T14:02:00") |> hour()
ymd_hms("2017-11-28T14:02:00") |> minute()
am("2017-11-28T14:02:00")
pm("2017-11-28T14:02:00")
```

### An example using galah

Data downloaded using the [galah](https://galah.ala.org.au/) package are loaded into R as date and time data (class `POSIXct`). As a result, you can immediately begin extracting date/time information using the functions above.

```{r}
plants |>
  mutate(
    year = year(eventDate),
    month = month(eventDate),
    week = isoweek(eventDate),
    day_julian = yday(eventDate)
    ) |>
  select(eventDate, year, month, 
         week, day_julian)
```

::: aside
<img src="https://images.ala.org.au/image/details?imageId=b64f6e42-3ba9-4cd2-951b-b55fb9ea0386" class="rounded"/></img>

::: figure-caption
[*Grevillea acanthifolia* just beginning to flower.<br>Photo by Fagg, M. CC-BY
4.0
(Int)](https://biocache.ala.org.au/occurrences/b5adbb1c-a21e-4f29-b7ca-869335c7cb38)
:::

:::

:::{.callout-warning collapse="true"}
##### Missing dates

Keep in mind that some occurrence records don't have date information (either it wasn't supplied or was deemed unreliable eg a non-existent date). Rows with missing dates will appear as `NA` values.

:::


## Filter

We can filter datasets to include or exclude data from certain dates or date ranges.   

```{r}
# return records after 2015
plants |>
  filter(eventDate >= ymd("2016-01-01"))
```

```{r}
# return records between 2015 & 2018
plants |> 
  filter(eventDate >= ymd("2016-01-01") & 
           eventDate <= ymd("2017-12-31"))
```

## Summary

In this chapter, we introduced common functions for cleaning dates and times in ecological datasets. For some data cleaning tasks, you may need to explore more advanced workflows to handle specific date and time formatting requirements.

In the next chapter, we look at issues that require more advanced ecological data cleaning techniques.
