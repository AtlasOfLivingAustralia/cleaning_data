# Large downloads

This section will provide a basic example of how to use arrow (and other sql packages like tidysql or dtplyr?). Will be short and sweet, with the aim to just give a few ideas of what exists.

Not all datasets are equal. Some have several hundred rows, others have millions of rows. Some contain two or three columns, others contain hundreds of columns. Some consist of one dataframe, others are lists that consist of *many* dataframes (each with their own columns and rows of data).

In this chapter, we briefly introduce {arrow}, a package that uses tidy syntax (like dplyr) to wrangle large datasets without breaking your computer.

### Prerequisites

```{r}
#| message: false
#| warning: false
library(dplyr)
library(here)
library(galah)
```


### Download from GBIF

**Shandiya, I think this example could be replaced by a better EcoAssets example**

To begin, let's retrieve a larger dataset of Kingfishers (family *Alcedinidae*).

:::{layout="[-1, 1, -1]"}
<img class = "rounded" src="https://ala-images.s3.ap-southeast-2.amazonaws.com/store/2/5/1/d/9525c6da-fd47-41fa-8eff-55c6747ed152/original"></img>
:::

::: {.figure-caption}
[*Todiramphus (Todiramphus) sanctus* perched
on a branch. Photo by Kerri-Lee Harris CC-BY-NC 4.0
(Int)](https://biocache.ala.org.au/occurrences/77b8aac0-18af-4ec6-a03c-ff825859a6f3)
:::

```{r}
#| echo: false
galah_config(email = Sys.getenv("ALA_EMAIL"),
             verbose = FALSE)
```

```{r}
#| eval: false
galah_config(email = "your-email-here") # ALA registered email
```

```{r}
birds <- galah_call() |>
  identify("alcedinidae") |>
  filter(year == 2023) |>
  atlas_occurrences()
```

Often, data like this is saved locally as a .csv using `write.csv()` or
`readr::write_csv`. 

**Old unedited stuff that used to use elephant data, but can now use kingfisher data**

For larger downloads, we
recommend saving the data as a Parquet file, as the compression and read/write
speeds are typically better for this type of data structure. We can do this
using the `arrow::write_parquet()` function, and `arrow::read_parquet()` can be
used to read in a parquet file.

```{r, echo = TRUE}
#| eval: false
arrow::write_parquet(african_ele, "../data/gbif/elephant")
elephant <- arrow::read_parquet("../data/gbif/elephant")
```