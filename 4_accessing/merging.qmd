---
editor: 
  markdown: 
    wrap: 72
code-annotations: hover
number-depth: 3
---

# Joins

If you work with biodiversity data, odds are high that you will need to join 2 separate datasets at some point to test how spatial, temporal or environmental factors influence species. This chapter is a brief overview of several common types of joins [dplyr]() to help get started. For a comprehensive introduction to joins, check out the [Joins chapter in R for Data Science](https://r4ds.hadley.nz/joins).

### Prerequisites

In this chapter, we will use pardalote occurrence data from 2015 in the ALA.

```{r}
#| eval: false
library(galah)
library(dplyr)
library(here)
library(ggplot2)

galah_config(email = "your-email-here")

pardalotes <- galah_call() |>
  identify("Pardalotus") |>
  filter(year == 2015) |>
  select(genus, 
         species, 
         scientificName, 
         cl22,
         year,
         month, 
         decimalLatitude,
         decimalLongitude) |> 
  atlas_occurrences()

pardalotes_taxonomy <- galah_call() |>
  identify("Pardalotus") |>
  atlas_species()
  
```

```{r}
#| echo: false
#| warning: false
#| message: false
library(galah)
library(dplyr)
library(here)
library(ggplot2)

galah_config(email = Sys.getenv("ALA_EMAIL"),
             verbose = FALSE)

pardalotes <- galah_call() |>
  identify("Pardalotus") |>
  filter(year == 2015) |>
  select(genus, 
         species, 
         scientificName, 
         cl22,
         year,
         month,
         decimalLatitude,
         decimalLongitude,
         cl959) |> 
  atlas_occurrences()

pardalotes_taxonomy <- galah_call() |>
  identify("Pardalotus") |>
  atlas_species()
```

:::{.aside}

<img class = "rounded" src="https://ala-images.s3.ap-southeast-2.amazonaws.com/store/7/6/2/0/1b7b3e7a-80d8-49e2-be69-f2b7ebb10267/original"></img>

::: {.figure-caption}
[*Pardalotus (Pardalotus) punctatus* eating a snack. Photo by sirkendizzle CC-BY-NC 4.0
(Int)](https://biocache.ala.org.au/occurrences/90dfaafd-a77c-4ccc-842d-3218a1ce64d2)
:::
:::

## Keys

Joining dataframes relies on setting a *key*---one or more columns that exist in a primary table that correspond to one or more columns in a second table. Two dataframes that we intend to join are matched according to the designated key.

As a basic example, let's say we want to add complete taxonomic information to our `pardalotes` dataframe, which contains occurrence records with some, but not all, taxonomic information. `pardalotes_taxonomy` contains complete taxonomic information for *Pardalotus*.

:::{.panel-tabset .nav-pills}

#### `pardalotes`

```{r}
pardalotes
```

#### `pardalotes_taxonomy`

```{r}
pardalotes_taxonomy
```
:::

Let's join our `pardalotes` dataframe with `pardalotes_taxonomy`. The column `scientificName` in `pardalotes` appears to contain (in general) the same information in column `species_name` in `pardalotes_taxonomy`.

::: {.panel-tabset .nav-pills}

#### `pardalotes$scientificName`

```{r}
pardalotes |>
  select(scientificName)
```


#### `pardalotes_taxonomy$species_name`

```{r}
pardalotes_taxonomy |>
  select(species_name)
```


:::

We can use these columns as a key to join the additional taxonomic information to our pardalotes occurrence records. We can also use the `genus` column as a second key to match any observations that have been identified down to genus, but not species, level.

```{r}
pardalotes |>
  left_join(pardalotes_taxonomy, 
            join_by(scientificName == species_name, 
                    genus == genus)
            ) |>
  
  rmarkdown::paged_table() # paged output
```


## Basic types of joins

There are *many* types of joins that can help you in all kinds of situations! Join types generally fall within two categories: 

  * [Mutating joins](https://r4ds.hadley.nz/joins#mutating-joins) combine variables from two tables (e.g., `left_join()`, `right_join()`, `full_join()`)
  * [Filtering joins](https://r4ds.hadley.nz/joins#filtering-joins) combine variables, and additionally keep or remove rows that do not match the key column (e.g., `semi_join()`, `anti_join()`)

Below are a few common examples of join types. Examples and animations are taken from [Garrick Aden-Buie's tidyexplain animations](https://github.com/gadenbuie/tidyexplain).

```{r}
x <- tibble(id = c(1, 2, 3),
            x = c("x1", "x2", "x3"))

y <- tibble(id = c(1, 2, 4),
            y = c("y1", "y2", "y4"))
```


::: {.panel-tabset .nav-pills}

#### Left join

![](../images/left-join.gif)

```{r}
left_join(x, y, join_by(id == id))
```

#### Right join

![](../images/right-join.gif)

```{r}
right_join(x, y, join_by(id == id))
```

#### Full join

![](../images/full-join.gif)

```{r}
full_join(x, y, join_by(id == id))
```


#### Semi join

![](../images/semi-join.gif)

```{r}
semi_join(x, y, join_by(id == id))
```

#### Anti join

![](../images/anti-join.gif)

```{r}
anti_join(x, y, join_by(id == id))
```

:::

## Spatial joins

It can be useful to summarise where species or taxonomic groups occur by grouping by a spatial region (e.g., state, council area, bioregion). To do so, records or summary statistics need to be linked to the region they pertain to. Usually, this requires a join between a spatial object and a dataframe, or between two spatial objects.

As an simple example, let's download a shapefile of Australian states and territories using the ozmaps package. Our `aus` object contains the name of each state/territory (`NAME`) and its shape (`geometry`)[^vector].

[^vector]: This shapefile contains state/territory outlines as vectors. See [this section on vectors](where-to-get-data.qmd#spatial-data) to learn more about what a vector is.

```{r}
#| warning: false
#| message: false
library(sf)
library(ozmaps)

aus <- ozmap_states |>
  st_transform(4326) # <1>

aus
```
1. This line transforms the CRS projection of our map to match the CRS projection of ALA data.

Our `pardalotes` data also contains the state/territory of each occurrence in column `cl22`. We can group by state/territory and summarise the number of occurrences to get an overall count by state/territory.

```{r}
counts_by_state <- pardalotes |>
  group_by(cl22) |>
  count()

counts_by_state
```

To prepare our data for mapping, we can join `counts_by_state` to `aus` using the state/territory name as our key.

```{r}
aus_counts <- aus |>
  left_join(counts_by_state,
            join_by(NAME == cl22))

aus_counts
```

Now we can use this data to create a choropleth map[^choro].

[^choro]: For more advanced examples of making choropleth maps, check out the ALA Labs articles [counting points in shapefiles](https://labs.ala.org.au/posts/2023-01-12_counting-points-in-shapefiles/) and [using multiple colour scales](https://labs.ala.org.au/posts/2022-05-23-ggnewscale/).

```{r}
ggplot() +
  geom_sf(data = aus_counts,
          aes(fill = n)) + 
  guides(fill = guide_coloursteps(title = "Number of\nObservations")) +
  scale_fill_viridis_c(option = "G") +
  theme_void()
```

The [sf package]() also has specialised functions for spatial joins like [`st_join()`](https://r-spatial.github.io/sf/reference/st_join.html), which can be especially useful for joins using points (e.g., `POINT`) and shapes (e.g., `POLYGON`, `MULTIPOLYGON`). Below is a small example where we use the point location to join with the state/territory. Note that we lose the `POINT` location in favour of the state `MULTIPOLYGON` shape, held in the column `geometry`.

```{r}
# convert record coordinates to sf POINT class
pardalotes_sf <- pardalotes |>
  tidyr::drop_na() |>
  st_as_sf(coords = c("decimalLongitude", "decimalLatitude"), 
           crs = 4326)

# join points to aus states that intersect spatially
states_with_species <- st_join(x = aus, 
                               y = pardalotes_sf,
                            join = st_intersects,
                            left = FALSE)

states_with_species |>
  rmarkdown::paged_table() # paged output
```


