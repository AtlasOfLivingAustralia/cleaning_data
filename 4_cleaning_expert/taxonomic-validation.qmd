---
code-annotations: hover
number-depth: 3
---

# Taxonomic validation

<!-- This is far too long -->

<!-- [can probably cut this]
Taxonomic classification is a prevalent but complex issue. So far, no
single solution exists, likely because it requires massive
effort to unify expert domain knowledge into one database of
all taxonomic history. This makes research with biodiversity data
challenging. 
-->

Taxonomic classification is in a state of constant change. 
Advances in taxonomy, especially in molecular biology have allowed
researchers to describe new species more efficiently than ever before
[@garraffoni2019integrative]. Modern approaches have enabled
reclassification of organisms that have been incorrectly described in
the past. As new discoveries are made, taxonomies are frequently updated or amended.

This process of changing taxonomy makes working with open source biodiversity data difficult. Views may differ within the literature or across authorities about what taxonomy is true. In different countries, one taxonomy might suit the native taxonomic diversity better than other taxonomies. Data infrastructures must also make choices about which taxonomic authorities they choose to use, and different infrastructures inevitably make different decisions. 

As a result, most taxonomic data will need checking and cleaning before use. You will encounter situations where the same species has several taxonomic names (synonyms) or sits within different groups depending on the taxonomy used (homonyms). These situations can be tricky to identify and clean when working with taxonomic data. 

While there is no perfect solution, some tips, tricks and tools do
exist. In this chapter we will go through some of these to clean
taxonomic data. This includes ways to deal with missing taxonomic
information, taxonomic synonyms, homonyms, [and other stuff].

:::{.callout-tip collapse="true"}
Cleaning taxonomic names can require a lot of changes! When cleaning taxonomic names, we recommend that you
maintain a clear and explicit record of any decisions and changes made with
respect to the data.
:::

### Prerequisites

In this chapter we will use a subset of invertebrate occurrence records taken from the [Curated Plant and Invertebrate Data for Bushfire Modelling data set](https://data.csiro.au/collection/csiro:56679).

```{r}
#| message: false
#| warning: false
library(readr)
library(dplyr)
library(tidyr)
library(janitor)
library(galah)

galah_config(email = Sys.getenv("ALA_EMAIL"),
             username = Sys.getenv("GBIF_USERNAME"),
             password = Sys.getenv("GBIF_PWD"),
             verbose = FALSE)

inverts <- here::here("data", "dap", "inverts_subset") |>
  arrow::open_dataset() |> 
  collect()
```




## Taxonomic names matching


### Adding taxonomic information

It's not uncommon to receive data that contains some but not all taxonomic rank information. Missing this information can make it difficult to summarise data or create taxonomic visualisations later on.

As an example, here is a small sample of our `inverts` dataset. You'll notice that we only have `scientific_name`, `class` and `family` information.

```{r}
inverts_sample <- inverts |>
  slice(1234:1271)

inverts_sample |> print(n = 5)
```

One way to extract names is to search for names matches in a data infrastructure like the ALA, which has its own taxonomic backbone. We can extract the names from our `inverts_sample` and save the strings in `taxa_sample_names`...

```{r}
taxa_sample_names <- inverts_sample |>
  select(scientific_name) |>
  distinct() |>
  pull()

taxa_sample_names[1:5] # first 5 names
```

...and use those names to search using `search_taxa()` from galah. We'll save the results in `names_matches_ala`.

:::{.callout-tip collapse="true" title="Search tip"}
Anytime you search for taxonomic matches using names, it's good to double check the urls in `taxon_concept_id` to make sure your search matched the result you expected!
:::

```{r}
names_matches_ala <- search_taxa(taxa_sample_names)
names_matches_ala
```

Now we can merge this information into our `inverts_sample` data. First, let's select and rename columns from our search that we want to join with `inverts_sample`. We'll add an `"_ala"` suffix to each column name so we can tell apart our data from the ALA from the data already in our data set.

```{r}
names_matches_renamed <- names_matches_ala |>
  select(scientific_name, kingdom:species) |>
  rename_with(\(column_name) paste0(column_name, "_ala"), # <1>
              kingdom:species)
names_matches_renamed
```
1. This line uses shorthand to write a function to append a suffix to a column name. An equivalent way of writing this is:<br>  `function(column_name) {paste0(column_name, "_ala)}`<br><br>This is applied to each column name from `kingdom` to `species` in the `names_matches_ala` dataframe.

Now let's join our matched names to our `inverts_sample` data.

```{r}
inverts_sample_with_ranks <- names_matches_renamed |>
  right_join(inverts_sample,                          # join to `inverts_sample`
             join_by(scientific_name == scientific_name)
             )
inverts_sample_with_ranks
```

We can check whether our new names match what was already in our data set to verify whether our matches were broadly correct. We'll use  `filter()` to return rows where `family_ala` does not equal `family`. Nothing is returned by our search, meaning the names in `family_ala` and `family` all match!

```{r}
inverts_sample_with_ranks |>
  select(scientific_name, family_ala, family) |>
  mutate(family = stringr::str_to_sentence(family)) |> # match formatting
  filter(family_ala != family)
```


## Mismatches in higher taxonomic ranks

Higher taxonomy from different data providers may not always match. If this is the case, you will need to back-fill the higher taxonomic ranks using data from your preferred taxonomic naming authority.

Let's use data of observations of Mallow plants we downloaded from the ALA as an example. 

```{r}
galah_config(atlas = "ala")

mallows <- galah_call() |>
  identify("Malvaceae") |>
  filter(year == 2014) |>
  atlas_occurrences()

```

The ALA uses its own taxonomic backbone, and so if we wanted to use these observations in a global analysis, we might need to match them to a different taxonomy. In our case, we have a species list we've download from GBIF of mallows.
We have occurrence data of plants in the genus *Commersonia*

```{r}
#| eval: false
# This is the original query
gbif_malvaceae_list <- request_data("species") |>
  identify("Malvaceae") |>
  collect(wait = FALSE)
```


```{r}
# load species list
gbif_species_list <- arrow::read_parquet(
  here::here("data", "lists", "gbif_malvaceae")) |>
  collect()

# oh no
gbif_species_list |>
  # distinct(family) |>
  filter(stringr::str_detect(species, "androcalva"))
```


```{r}
galah_config(atlas = "gbif")
gbif_taxa <- search_taxa("commersonia rosea")
gbif_taxa |> select(family)
```


```{r}
galah_config(atlas = "ala")
ala_taxa <- search_taxa("commersonia rosea")
ala_taxa



mallows |> 
  filter(stringr::str_detect(scientificName, "comm"))
```


```{r}
library(purrr)
gbif_taxa_fixed <- gbif_taxa |>
  select(canonical_name, kingdom, phylum, class, order, family, genus, species) |>
  rename(scientific_name = canonical_name)

ala_taxa_fixed <- ala_taxa |>
  select(scientific_name, kingdom, phylum, class, order, family, genus, species)

anti_join(ala_taxa_fixed, gbif_taxa_fixed, 
          by = join_by(species == species))

find_diffs <- function(name) {
  
  setdiff(ala_taxa_fixed |>
            select(all_of({{name}})), 
          gbif_taxa_fixed |>
            select(all_of({{name}})))
}

colnames(ala_taxa_fixed) |>
  map(\(names)
      find_diffs(names))



# higher_taxonomy
```

## Name format

Different data providers might use different formats in their taxonomic
names to delineate between taxonomic ranks. It doesn't matter which
format your data uses as long as it remains consistent.

In this example using data from the ALA, subspecies of Acacia
observations specify subspecies using "subsp.", whereas subspecies of
bird observations simply add an additional name.

```{r}
#| warning: false
#| message: false
#| eval: false
library(galah)
library(dplyr)
library(stringr)
galah_config(email = Sys.getenv("ALA_EMAIL"),
             verbose = FALSE)

acacia <- galah_call() |>
  identify("Acacia") |>
  filter(year == 2018) |>
  atlas_occurrences()

birds <- galah_call() |>
  identify("alcedinidae") |>
  filter(year == 2023) |>
  atlas_occurrences()

acacia |>
  filter(str_detect(scientificName, "Acacia brunioides")) |>
  distinct(scientificName)
  
birds |>
  filter(str_detect(scientificName, "Dacelo")) |>
  distinct(scientificName)
```

Although both are correct, be sure to check your data to make sure that this naming format is consistent.

```{r loaddata}
#| warning: false
#| message: false
library(arrow)
library(tidyverse)
library(janitor)

plants <- open_dataset("../data/dap/plants_subset",
  format = "parquet"
) |> collect()

### Making some fake missing data for inverts in Class column
inverts <- open_dataset("../data/dap/inverts_subset") |> collect()

set.seed(5)
tobemissing <- inverts |>
  filter(class == "arachnida") |>
  sample_frac(0.3) |>
  pull(scientific_name) |>
  unique()

inverts <- inverts |>
  mutate(class = ifelse(scientific_name %in% tobemissing, NA, class))
```

## Detecting synonyms

There are several packages available that can be used to query different
taxonomic databases and check for synonyms. 

Cam has suggested to use "Litoria caerulea", which is known internationally as "Ranoidea caerulea". 

Androcalva rosea & Commersonia rosea is another example.

#### `worrms`  

The [{worrms}](https://docs.ropensci.org/worrms/) is the R interface to the
World Register of Marine Species and has the ability to cross check synonyms
with their database for taxa that has an `AphiaID`. The function will return
synonymous record(s) associated with another different AphiaID. 

```{r}
#| warning: false
#| message: false
library(worrms)
library(tidyverse)

marine_sp <- read_csv("../data/worms/worms.csv")

marine_sp |>
  slice(7) |>
  pull(AphiaID) |>
  wm_synonyms()
```

#### `taxize` 

<!-- Notes/Andrew: There's no explanation for anything about this list here,
what is it, where is it from etc -->
<!-- Notes/Andrew: Wouldn't it be better to show, or also show, how to do this query with your dataset? -->
The `taxize` package allows users to search over many taxonomic data sources for
hierarchial taxonomic information, such as species names (scientific and
common), to resolve synonymy. The `gnr_resolve()` function matches a supplied
list with up to 118 data sources including GBIF, Catalogue of Life, World
Register of Marine Species and many more. The function scores how well matched
your name is to these sources. 

```{r}
library(taxize)

# Read in a naming authority list
afd <- read_csv("../data/naming/afd.csv")
unique(afd$VALID_NAME)

# Resolve names
resolved <- gnr_resolve(unique(afd$VALID_NAME), best_match_only = TRUE)
resolved |> print(n = 50)

# Retrieve synonyms
tsn <- get_tsn(unique(afd$VALID_NAME)[1:5])
synonyms(tsn)


```


## Detecting homonyms




## Input from experts

Programmatic solutions for resolving synonymy can only go so far. Seeking
validation from experts is sensible if your goal is to obtain a high quality
species list. Museums or taxonomic societies are extensive sources of knowledge.
Below we have provided a list of some of Australian taxonomic society groups. 

### Australian taxonomic society groups

**VERTEBRATES**

-   Amphibians and reptiles - [Australian Herpetological Society](https://ahs.org.au/)\
-   Birds - [Birdlife Australia](https://www.birdlife.org.au/)\
-   Fish - [Australian Society for Fish Biology](https://www.asfb.org.au/)\
-   Mammals - [The Australian Mammal Society](https://australianmammals.org.au/)

**INVERTEBRATES**

-   Arachnology - [Australasian Arachnological Society](www.australasianarachnologicalsociety.org)\
-   Entomology - [Australian Entomological Society](https://www.austentsoc.org.au/)\
-   Malacology - [The Malacological Society of Australasia](https://www.malsocaus.org/)\
-   Nematology - [Australasian Association of Nematologists](https://www.nematologists.org.au/)

### Global taxonomy

-   [GBIF taxonomic backbone](https://www.gbif.org/dataset/d7dddbf4-2cf0-4f39-9b2a-bb099caae36c) - Uses over 100 different sources
-   [Integrated Taxonomic Information System, ITIS](https://www.itis.gov/) - Authoritative taxonomic information on plants, animals, fungi, and microbes
-   [Catalogue of Life](https://www.catalogueoflife.org/) - Global taxonomic catalogue   


## Recycle bin

<!-- I feel like the following section isn't important enough, captured by other tasks in other chapters -->

### Seperators

In taxonomic data, separators (such as spaces and underscores) are found
in scientific names and are used to delineate the genus and [species
name](https://dwc.tdwg.org/terms/#dwc:specificEpithet). While it is
personal choice which separator you use, it is good practice to be
consistent with your choice. Consistency ensures that unique values of
scientific name truly reflects unique species and not due to
inconsistencies.

For example, some plant species in the ALA like Acacia specify
subspecies

```{r}
library(janitor)

plants |>
  pull(scientific_name) |>
  tabyl() |>
  tibble()
```

Consistent taxonomic formatting may not be an issue if you are
downloading data from one single source such as the ALA where scientific
names are already formatted consistently e.g. "Moloch horridus". This
may not be the case when consolidating data from multiple sources.

Below is code to create an underscore scientific name from one that is
separated with a space. Remember to check your changes

```{r}
plants_updated <- plants |>
  mutate(scientific_name_undersc = str_replace_all(scientific_name, " ", "_"))

plants_updated |>
  pull(scientific_name_undersc) |>
  tabyl() |>
  tibble()
```


## Unsure what this is

```{r}
afd <- readr::read_csv(here::here("data", "naming", "afd.csv")) |>
  clean_names()

afd |>
  filter(group_name == "PLATYHELMINTHES") |>
  slice(4) |>
  pull(genus) |>
  search_taxa()

galah_call() |>
  identify("Pseudopecoelus") |>
  atlas_species()

afd |>
  filter(valid_name %in% inverts_sample$scientific_name)
```