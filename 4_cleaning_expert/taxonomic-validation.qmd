---
code-annotations: hover
number-depth: 3
---

# Taxonomic validation

<!-- This is far too long -->

<!-- [can probably cut this]
Taxonomic classification is a prevalent but complex issue. So far, no
single solution exists, likely because it requires massive
effort to unify expert domain knowledge into one database of
all taxonomic history. This makes research with biodiversity data
challenging. 
-->

Taxonomic classification is in a state of constant change. 
Advances in taxonomy, especially in molecular biology have allowed
researchers to describe new species more efficiently than ever before
[@garraffoni2019integrative]. Modern approaches have enabled
reclassification of organisms that have been incorrectly described in
the past. As new discoveries are made, taxonomies are frequently updated or amended.

This process of changing taxonomy makes working with open source biodiversity data difficult. Views may differ within the literature or across authorities about what taxonomy is true. In different countries, one taxonomy might suit the native taxonomic diversity better than other taxonomies. Data infrastructures must also make choices about which taxonomic authorities they choose to use, and different infrastructures inevitably make different decisions. 

As a result, most taxonomic data will need checking and cleaning before use. You will encounter situations where the same species has several taxonomic names (synonyms) or sits within different groups depending on the taxonomy used (homonyms). These situations can be tricky to identify and clean when working with taxonomic data. 

While there is no perfect solution, some tips, tricks and tools do
exist. In this chapter we will go through some of these to clean
taxonomic data. This includes ways to deal with missing taxonomic
information, taxonomic synonyms, homonyms, [and other stuff].

:::{.callout-tip collapse="true"}
Cleaning taxonomic names can require a lot of changes! When cleaning taxonomic names, we recommend that you
maintain a clear and explicit record of any decisions and changes made with
respect to the data.
:::

### Prerequisites

In this chapter we will use a subset of invertebrate occurrence records taken from the [Curated Plant and Invertebrate Data for Bushfire Modelling data set](https://data.csiro.au/collection/csiro:56679).

```{r}
#| message: false
#| warning: false
library(readr)
library(dplyr)
library(tidyr)
library(stringr)
library(janitor)
library(galah)

galah_config(email = Sys.getenv("ALA_EMAIL"),
             username = Sys.getenv("GBIF_USERNAME"),
             password = Sys.getenv("GBIF_PWD"),
             verbose = FALSE)

inverts <- here::here("data", "dap", "inverts_subset") |>
  arrow::open_dataset() |> 
  collect()

eucalypts <- galah_call() |>
  identify("Eucalyptus") |>
  filter(eventDate > "2014-01-01T00:00:00Z",
         eventDate < "2014-06-01T00:00:00Z") |>
  select(group = "basic", 
         kingdom, phylum, class, order, 
         family, genus, species, taxonRank) |>
  atlas_occurrences()
```




## Taxonomic names matching


### Adding taxonomic information

It's not uncommon to receive data that contains some but not all taxonomic rank information. Missing this information can make it difficult to summarise data or create taxonomic visualisations later on.

As an example, here is a small sample of our `inverts` dataset. You'll notice that we only have `scientific_name`, `class` and `family` information.

```{r}
inverts_sample <- inverts |>
  slice(1234:1271)

inverts_sample |> print(n = 5)
```

One way to extract names is to search for names matches in a data infrastructure like the ALA, which has its own taxonomic backbone. We can extract the names from our `inverts_sample` and save the strings in `taxa_sample_names`...

```{r}
taxa_sample_names <- inverts_sample |>
  select(scientific_name) |>
  distinct() |>
  pull()

taxa_sample_names[1:5] # first 5 names
```

...and use those names to search using `search_taxa()` from galah. We'll save the results in `names_matches_ala`.

:::{.callout-tip collapse="true" title="Search tip"}
Anytime you search for taxonomic matches using names, it's good to double check the urls in `taxon_concept_id` to make sure your search matched the result you expected!
:::

```{r}
names_matches_ala <- search_taxa(taxa_sample_names)
names_matches_ala
```

Now we can merge this information into our `inverts_sample` data. First, let's select and rename columns from our search that we want to join with `inverts_sample`. We'll add an `"_ala"` suffix to each column name so we can tell apart our data from the ALA from the data already in our data set.

```{r}
names_matches_renamed <- names_matches_ala |>
  select(scientific_name, kingdom:species) |>
  rename_with(\(column_name) paste0(column_name, "_ala"), # <1>
              kingdom:species)
names_matches_renamed
```
1. This line uses shorthand to write a function to append a suffix to a column name. An equivalent way of writing this is:<br>  `function(column_name) {paste0(column_name, "_ala)}`<br><br>This is applied to each column name from `kingdom` to `species` in the `names_matches_ala` dataframe.

Now let's join our matched names to our `inverts_sample` data.

```{r}
inverts_sample_with_ranks <- names_matches_renamed |>
  right_join(inverts_sample,                          # join to `inverts_sample`
             join_by(scientific_name == scientific_name)
             )
inverts_sample_with_ranks
```

We can check whether our new names match what was already in our data set to verify whether our matches were broadly correct. We'll use  `filter()` to return rows where `family_ala` does not equal `family`. Nothing is returned by our search, meaning the names in `family_ala` and `family` all match!

```{r}
inverts_sample_with_ranks |>
  select(scientific_name, family_ala, family) |>
  mutate(family = stringr::str_to_sentence(family)) |> # match formatting
  filter(family_ala != family)
```


## Mismatches in higher taxonomic ranks

Higher taxonomy from different data providers may not always match. If this is the case, you will need to back-fill the higher taxonomic ranks using data from your preferred taxonomic naming authority.

Let's use data of Eucalyptus observations we downloaded from the ALA as an example. 

```{r}
eucalypts
```

This occurrence data contains observations of over 373 species.

```{r}
eucalypts |>
  filter(taxonRank != "genus") |>
  distinct(scientificName) |>
  count(name = "n_species")
```

Let's say we want to compare these observations to data retrieved outside of the ALA and decide that we'd prefer to use GBIF's[^gbif] taxonomy. Our data is from the ALA, which uses its own taxonomic backbone that differs to GBIF's (depending on the taxonomic group). Let's go through the steps to match our taxonomy in our `eucalypts` data to GBIF's taxonomy. 

[^gbif]: [Global Biodiversity Infrastructure Facility (GBIF)](https://www.gbif.org/)

We can download a species list of *Eucalyptus* from GBIF. This list returns nearly 1,700 species names!

```{r}
#| eval: false
# This is the original query to download our species list
# It takes several minutes to download
gbif_species_list <- request_data("species") |>
  identify("Eucalyptus") |>
  collect()

gbif_species_list
```

```{r}
#| code-fold: true
#| code-summary: Code to load local version of species list
# load species list
gbif_species_list <- arrow::read_parquet(
  here::here("data", "lists", "gbif_eucalyptus")) |>
  collect()

gbif_species_list
```


To investigate whether the complete taxonomy---from kingdom to species---matches between our ALA data and GBIF species list, let's get the columns with taxonomic information from our `eucalypts` dataframe and our `gbif_species_list` to compare. 

First, we can select the taxonomic rank columns in our ALA `eucalypts` dataframe (`kingdom` to `species`) and use `distinct()` to remove duplicate rows. This will leave us with one row for each distinct species in our dataset (very similar to a species list). 

```{r}
ala_ranks <- eucalypts |>
  select(kingdom:species) |>
  distinct()

ala_ranks
```

Now let's filter `gbif_species_list` to only "accepted" names[^1] and select the same taxonomic rank columns.

[^1]: GBIF's species list is quite comprehensive, and it includes the `taxonomicStatus` of a name as "accepted", "synonym", "variety" or "doubtful". To keep our example simpler, we are only using the accepted names.

```{r}
gbif_ranks <- gbif_species_list |>
  filter(taxonomicStatus == "ACCEPTED") |> # accepted names
  select(kingdom:species) |> 
  select(!contains("Key")) |> # remove Key columns
  distinct() # <1>

gbif_ranks
```
1. We added `distinct()` to remove duplicate rows of species names. These duplicates appear because there might be multiple subspecies under the same species name. For example, *Eucalyptus mannifera* has 4 subspecies; *Eucalyptus wimmerensis* has 5. We aren't interested in identifying species at that level, and so we remove these duplicates to simplify our species list.

We can merge our taxonomic rank dataframes together, matching by species name. We'll distinguish which columns came from each dataframe by appending an `"_ala"` or `"_gbif"` suffix.

```{r}
matched_names <- ala_ranks |>
  left_join(gbif_ranks, 
            join_by(species == species), 
            suffix = c("_ala", "_gbif")) |>
  select(species, everything()) # reorder columns
```

`matched_names` now contains the full taxonomy from the ALA and GBIF for all matched species[^2].

[^2]: Several species names did not match to GBIF. In a complete data cleaning workflow, these should be investigated as the ALA and GBIF might use synonym names to describe the same species or subspecies.

```{r}
rmarkdown::paged_table( # print paged table
  matched_names
  )
```

After matching our names in this way, we can now compare taxonomic rank columns to find mismatches. For example, we can find any species with a mismatch in their kingdom name by filtering to rows where `kingdom_ala` and `kingdom_gbif` are not equal. Our returned tibble is empty, meaning there were no mismatches.

```{r}
matched_names |>
  filter(kingdom_ala != kingdom_gbif)
```

If we do the same for phylum and class, however, we return quite a few results.

:::{.panel-tabset .nav-pills}

#### phylum

```{r}
matched_names |>
  filter(phylum_ala != phylum_gbif) |>
  select(species, phylum_ala, phylum_gbif)
```

#### class

```{r}
matched_names |>
  filter(class_ala != class_gbif) |>
  select(species, class_ala, class_gbif)
```

:::

It turns out that there *is* a difference between the ALA and GBIF in their higher taxonomic ranks of *Eucalyptus* plants.

In GBIF, *Eucalyptus* sits in the phylum *Tracheophyta* and the class *Magnoliopsida*...

```{r}
# Use GBIF
galah_config(atlas = "gbif")

# Search for taxonomic information
gbif_taxa <- search_taxa("eucalyptus")

# Show relevant columns
gbif_taxa |>
  select(scientific_name, phylum, class, order)
```

...whereas in the ALA, *Eucalyptus* sits in the phylum *Charophyta* and the class *Equisetopsida*.

```{r}
# Switch to download from the ALA
galah_config(atlas = "ala")

# Search for taxonomic information
ala_taxa <- search_taxa("Eucalyptus")

# Show relevant columns
ala_taxa |>
  select(scientific_name, phylum, class, order)
```

We might not know about this issue when we first decide to match GBIF's taxonomic names to our data. So it's important to investigate how well these names match (and where there are any mismatches) before merging them to our data.

If you are using a taxonomy from ALA or GBIF, you can use `search_taxa()` in galah to see which names match *before* you download a species list. For example, we can search for all the species names in our `eucalypts` dataframe.

```{r}
#| eval: false
galah_config(atlas = "gbif")

# search (this takes ~60 seconds)
names_search_results <- 
  eucalypts |>
  pull(species) |> # pull out species names
  unique() |>      # remove duplicate names
  search_taxa()    # search

names_search_results
```

```{r}
#| echo: false
galah_config(atlas = "gbif")

# load list saved locally
names_search_results <- 
  arrow::read_parquet(here::here("data",
                                 "lists",
                                 "gbif_eucalypt_search"))

names_search_results
```

Our search has found several mismatches in higher taxonomic ranks. If we are happy with these differences, we can merge our taxonomic rank columns from GBIF with our `eucalypt` occurrences data.

```{r}
matched_names |>
  select(species, kingdom_gbif:genus_gbif) |>
  right_join(eucalypts,
             join_by(species == species)) |>
  rmarkdown::paged_table() # paged table output
```


## Name format

Different data providers might use different formats in their taxonomic
names to delineate between taxonomic ranks. It doesn't matter which
format your data uses as long as it remains consistent.

An an example, data from the ALA specifies subspecies of Acacia
observations using `"subsp."` in the scientific name, whereas subspecies of
bird observations simply add an additional name.

<!-- -->

```{r}
#| warning: false
#| message: false
galah_config(atlas = "ala")

acacia <- galah_call() |>
  identify("Acacia") |>
  filter(year == 2018) |>
  atlas_occurrences()

acacia |>
  filter(str_detect(scientificName, "Acacia brunioides")) |>
  distinct(scientificName)

birds <- galah_call() |>
  identify("alcedinidae") |>
  filter(year == 2023) |>
  atlas_occurrences()
  
birds |>
  filter(str_detect(scientificName, "Dacelo")) |>
  distinct(scientificName)
```

Although both are correct, be sure to check your data to make sure that this naming format is consistent.



## Detecting synonyms

Scientific discoveries and advances in taxonomic classification can cause taxonomic names to change. A taxonomic **synonym** refers to a scientific name that a taxon that goes by a different name. Synonyms can come about when a taxon was once referred to a taxon that has since had its accepted scientific name changed. Synonyms are important because older records referred to by a synonym can still be searched for and linked to other taxonomic records.

Synonyms can be tricky to deal with during data cleaning because they can be difficult to spot. Here are several examples of synonyms.

:::{.panel-tabset .nav-pills}

#### Mallows

*Commersonia rosea* is a synonym of *Androcalva rosea*, a species of mallow. The genus and species returned by GBIF differs from the ALA.

```{r}
galah_config(atlas = "gbif")
gbif_taxa <- search_taxa("commersonia rosea")

gbif_taxa |> 
  select(scientific_name, genus, species)
```

```{r}
galah_config(atlas = "ala")
ala_taxa <- search_taxa("commersonia rosea")

ala_taxa |> 
  select(scientific_name, genus, species)
```

#### Frogs

*Ranoidea caerulea* is a synonym of *Litoria caerulea*, a species of frog. The genus and species returned by GBIF differs from the ALA.

```{r}
galah_config(atlas = "gbif")
gbif_taxa <- search_taxa("Litoria caerulea")

gbif_taxa |> 
  select(scientific_name, genus, species)
```

```{r}
galah_config(atlas = "ala")
ala_taxa <- search_taxa("Litoria caerulea")

ala_taxa |>
  select(scientific_name, genus, species)
```

:::

Using tools like `search_taxa()` in galah is a useful way to check whether a search returns the taxonomic information you expect.


### Checking for synonyms

Some species lists return accepted names *and* synonyms. For example, here is a species list of *Eucalyptus* downloaded from GBIF.

```{r}
#| eval: false
# This is the original query to download our species list
# It takes several minutes to download
gbif_species_list <- request_data("species") |>
  identify("Eucalyptus") |>
  collect()

gbif_species_list
```

```{r}
#| code-fold: true
#| code-summary: Code to load local version of species list
# load species list
gbif_species_list <- arrow::read_parquet(
  here::here("data", "lists", "gbif_eucalyptus")) |>
  collect()

gbif_species_list
```

GBIF species lists includes a `taxonomicStatus` column that supplies information of whether a taxonomic name is accepted or a synonym. A good example is *Eucalyptus leucoxylon*, which has a number of accepted names and synonyms for species and subspecies.

```{r}
gbif_species_list |>
  filter(species == "Eucalyptus leucoxylon") |>
  select(species, taxonomicStatus, acceptedScientificName)
```

### Packages

There are several packages available that can be used to query different
taxonomic databases and check for synonyms. 

:::{.panel-tabset .nav-pills}

#### worrms  

The [worrms package](https://docs.ropensci.org/worrms/) is the R interface to the
World Register of Marine Species (WoRMS). When working with data from this database, the worrms R package has the ability to cross-check synonyms in their database using their taxonomic ID (`AphiaID`). 

For example, we can return existing synonyms for *Lupocyclus inaequalis* by supplying its `AphiaID` to the `wm_synonyms()` function.
```{r}
#| warning: false
#| message: false
library(worrms)

marine_sp <- read_csv(here::here("data",
                                 "worms",
                                 "worms.csv"))

marine_sp |>
  filter(scientificname == "Lupocyclus inaequalis") |>
  select(AphiaID, scientificname, status)
```

Our search returns a superseded synonym *Goniosoma inaequale*.

```{r}
marine_sp |>
  filter(scientificname == "Lupocyclus inaequalis") |>
  pull(AphiaID) |>
  wm_synonyms() |>
  select(AphiaID, scientificname, status)
```

#### taxize 

The [taxize package](LINK) allows users to search over many taxonomic data sources for
hierarchial taxonomic information, such as species names (scientific and
common), to resolve synonymy. 

Let's search for any synonyms of *Litoria caerulea* using tools from taxize.

We can match names against up to 118 data sources including GBIF, Catalogue of Life, World
Register of Marine Species using `gnr_resolve()`. This function scores how well-matched
your name is to these sources. 

```{r}
library(taxize)

# Resolve names
resolved <- gnr_resolve(unique("litoria caerulea"), best_match_only = TRUE)
resolved |> print(n = 50)
```

Using the resolved name, we can search for its Taxonomic Serial Number using `get_tsn()`, which taxize uses to as a taxonomic identifier. Then we can search for existing synonyms by supplying the `tsn` to the `synonyms()` function.

```{r}
# Retrieve synonyms
tsn <- get_tsn(unique(resolved$matched_name))
synonyms(tsn)
```

:::

## Detecting homonyms

Taxonomy is a complex field of science, with Callum suggested Morganella. Also suggest Epiblema


## Input from experts

Programmatic solutions for resolving synonymy can only go so far. Seeking
validation from experts is sensible if your goal is to obtain a high quality
species list. Museums or taxonomic societies are extensive sources of knowledge.
Below we have provided a list of some of Australian taxonomic society groups. 

### Australian taxonomic society groups

**VERTEBRATES**

-   Amphibians and reptiles - [Australian Herpetological Society](https://ahs.org.au/)\
-   Birds - [Birdlife Australia](https://www.birdlife.org.au/)\
-   Fish - [Australian Society for Fish Biology](https://www.asfb.org.au/)\
-   Mammals - [The Australian Mammal Society](https://australianmammals.org.au/)

**INVERTEBRATES**

-   Arachnology - [Australasian Arachnological Society](www.australasianarachnologicalsociety.org)\
-   Entomology - [Australian Entomological Society](https://www.austentsoc.org.au/)\
-   Malacology - [The Malacological Society of Australasia](https://www.malsocaus.org/)\
-   Nematology - [Australasian Association of Nematologists](https://www.nematologists.org.au/)

### Global taxonomy

-   [GBIF taxonomic backbone](https://www.gbif.org/dataset/d7dddbf4-2cf0-4f39-9b2a-bb099caae36c) - Uses over 100 different sources
-   [Integrated Taxonomic Information System, ITIS](https://www.itis.gov/) - Authoritative taxonomic information on plants, animals, fungi, and microbes
-   [Catalogue of Life](https://www.catalogueoflife.org/) - Global taxonomic catalogue   


## Recycle bin

<!-- I feel like the following section isn't important enough, captured by other tasks in other chapters -->

#### Seperators

In taxonomic data, separators (such as spaces and underscores) are found
in scientific names and are used to delineate the genus and [species
name](https://dwc.tdwg.org/terms/#dwc:specificEpithet). While it is
personal choice which separator you use, it is good practice to be
consistent with your choice. Consistency ensures that unique values of
scientific name truly reflects unique species and not due to
inconsistencies.

For example, some plant species in the ALA like Acacia specify
subspecies

```{r loaddata}
#| warning: false
#| message: false
library(arrow)
library(tidyverse)
library(janitor)

plants <- open_dataset("../data/dap/plants_subset",
  format = "parquet"
) |> collect()

### Making some fake missing data for inverts in Class column
inverts <- open_dataset("../data/dap/inverts_subset") |> collect()

set.seed(5)
tobemissing <- inverts |>
  filter(class == "arachnida") |>
  sample_frac(0.3) |>
  pull(scientific_name) |>
  unique()

inverts <- inverts |>
  mutate(class = ifelse(scientific_name %in% tobemissing, NA, class))
```

```{r}
#| eval: false
library(janitor)

plants |>
  pull(scientific_name) |>
  tabyl() |>
  tibble()
```

Consistent taxonomic formatting may not be an issue if you are
downloading data from one single source such as the ALA where scientific
names are already formatted consistently e.g. "Moloch horridus". This
may not be the case when consolidating data from multiple sources.

Below is code to create an underscore scientific name from one that is
separated with a space. Remember to check your changes

```{r}
plants_updated <- plants |>
  mutate(scientific_name_undersc = str_replace_all(scientific_name, " ", "_"))

plants_updated |>
  pull(scientific_name_undersc) |>
  tabyl() |>
  tibble()
```


#### Unsure what this is

```{r}
afd <- readr::read_csv(here::here("data", "naming", "afd.csv")) |>
  clean_names()

afd |>
  filter(group_name == "PLATYHELMINTHES") |>
  slice(4) |>
  pull(genus) |>
  search_taxa()

galah_call() |>
  identify("Pseudopecoelus") |>
  atlas_species()

afd |>
  filter(valid_name %in% inverts_sample$scientific_name)
```

