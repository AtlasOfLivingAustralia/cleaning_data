---
editor: 
  markdown: 
    wrap: 72
code-annotations: hover
number-depth: 3
---

# Joins

If you work with biodiversity data, it is likely that you will need to join two separate datasets at some point to analyse how spatial, temporal, or environmental factors influence species. This chapter provides a brief overview of several common types of joins in [dplyr](https://dplyr.tidyverse.org/) to help you get started. 

For a comprehensive introduction to joins, check out the [Joins chapter in R for Data Science](https://r4ds.hadley.nz/joins).

### Prerequisites

In this chapter, we will use starling occurrence data from September 2015 in the ALA.

```{r prereq-internal}
#| echo: false
#| warning: false
#| message: false
# packages
library(galah)
library(dplyr)
library(here)
library(ggplot2)
galah_config(email = Sys.getenv("ALA_EMAIL"),
             verbose = FALSE)

# get DOIs for chapter
doi_table <- here::here("data", "galah-dois", "doi_table") |>
  arrow::open_dataset() |>
  filter(chapter == "Joins") |>
  collect()

# extract dois
doi_starlings <- doi_table |> filter(name == "starlings") |> pull(doi)

# download
starlings <- galah_call() |>
  filter(doi == doi_starlings) |>
  atlas_occurrences()

starlings_taxonomy <- galah_call() |>
  identify("Sturnidae") |>
  atlas_species()
```

```{r prereq-external}
#| echo: false
test <- glue::glue(
"
# packages
library(galah)
library(dplyr)
library(here)
library(ggplot2)
galah_config(email = \"your-email-here\") # ALA-registered email

starlings <- galah_call() |>
  filter(doi == \"{doi_starlings}\") |>
  atlas_occurrences()

starlings_taxonomy <- galah_call() |>
  identify(\"Sturnidae\") |>
  atlas_species()
"
)
```

```{r prereq-printed}
#| eval: false
#| code: !expr test
#| echo: true
```

:::{.aside}

<img class = "rounded" src="https://ala-images.s3.ap-southeast-2.amazonaws.com/store/9/0/8/4/4a8c739b-5c41-4754-b064-ea96d0104809/original"></img>

::: {.figure-caption}
[*Sturnus (Sturnus) vulgaris* perched on a branch. Photo by Rob Solic CC-BY-NC 4.0
(Int)](https://biocache.ala.org.au/occurrences/80d72213-1a92-43d3-bcb2-eb008d49319e)
:::
:::

<!-- Queries -->
:::{.callout-note collapse="true" appearance="minimal"}

#### Original download queries

**Note:** You don't need to run this code block to read this chapter. It can, however, be useful to see the original download query. This code will download the latest data from the ALA, which you are welcome to use instead, though the data might not exactly reproduce results in this chapter.

```{r prereq-orig-query}
#| eval: false
library(galah)
galah_config(email = "your-email-here")

starlings <- galah_call() |>
  identify("Sturnidae") |>
  filter(year == 2015,
         month == 9) |>
  select(genus, 
         species, 
         scientificName, 
         cl22,
         year,
         month, 
         decimalLatitude,
         decimalLongitude) |> 
  atlas_occurrences() # <1>
```
1. We created a custom DOI for our download by using `atlas_occurrences(mint_doi = TRUE)`.

:::

## Keys

Joining dataframes relies on setting a *key*---one or more columns that exist in a primary table that correspond to one or more columns in a secondary table. Two datasets that we intend to join are matched according to the designated key.

As a simple example, let's say we want to add complete taxonomic information to our `starlings` dataframe, which contains occurrence records with some, but not all, levels of taxonomic information. `starlings_taxonomy` contains complete taxonomic information for *Sturnidae*.

:::{.panel-tabset .nav-pills}

#### `starlings`

```{r}
starlings
```

#### `starlings_taxonomy`

```{r}
starlings_taxonomy
```
:::

Let's join our `starlings` dataframe with `starlings_taxonomy`. The column `genus` in `starlings` appears to contain the same information in column `genus` in `starlings_taxonomy`.


::: {.panel-tabset .nav-pills}

#### `starlings$genus`

```{r}
starlings |>
  select(genus) |> 
  distinct()
```


#### `starlings_taxonomy$genus`

```{r}
starlings_taxonomy |>
  select(genus) 
```


:::

We can use this genus column as a key to add the extra levels of taxonomic information to the table containing starling occurrence records[^genus].

[^genus]: Using `genus` is also a better choice than `species` or `scientificName` in this instance because they appear to contain similar *but not exactly the same* information to `starlings_taxonomy$species_name`. Using these columns as a key for our join would result in missing information after joining due to mismatches.

```{r}
starlings |>
  left_join(starlings_taxonomy, 
            join_by(genus)) |>
  
  rmarkdown::paged_table() # paged output
```

Note that we received some warnings indicating that some rows had multiple matches. Make sure to read these warning messages carefully if you ever receive them because they might tell you that something unexpected happened during your join! In our case, the warnings are the result of several genera in `starlings_taxonomy` having the same genus name, which is something we already knew about and doesn't worry us.

## Basic types of joins

There are *many* types of joins that can help you in all kinds of situations! Join types generally fall within two categories: 

  * [Mutating joins](https://r4ds.hadley.nz/joins#mutating-joins) combine variables from two tables (e.g., `left_join()`, `right_join()`, `full_join()`)
  * [Filtering joins](https://r4ds.hadley.nz/joins#filtering-joins) combine variables, and additionally keep or remove rows that do not match the key column (e.g., `semi_join()`, `anti_join()`)

Below are a few common examples of join types. Examples and animations are taken from [Garrick Aden-Buie's tidyexplain animations](https://github.com/gadenbuie/tidyexplain).

```{r}
x <- tibble(id = c(1, 2, 3),
            x = c("x1", "x2", "x3"))

y <- tibble(id = c(1, 2, 4),
            y = c("y1", "y2", "y4"))
```


::: {.panel-tabset .nav-pills}

#### Left join

![](../images/left-join.gif)

```{r}
left_join(x, y, join_by(id))
```

#### Right join

![](../images/right-join.gif)

```{r}
right_join(x, y, join_by(id))
```

#### Full join

![](../images/full-join.gif)

```{r}
full_join(x, y, join_by(id))
```


#### Semi join

![](../images/semi-join.gif)

```{r}
semi_join(x, y, join_by(id))
```

#### Anti join

![](../images/anti-join.gif)

```{r}
anti_join(x, y, join_by(id))
```

:::

## Spatial joins

Summarising where species or taxonomic groups occur by grouping them by spatial regions (e.g. state, council area, bioregion) can be useful. To do this, records or summary statistics need to be linked to their corresponding regions. This typically requires joining a spatial object with a dataframe, or joining two spatial objects.

As a simple example, let's download a shapefile of Australian states and territories using the ozmaps package. The `aus` object contains the name of each state/territory (`NAME`) and its shape (geometry)[^vector].

[^vector]: This shapefile contains state/territory outlines as vectors. See [this section on vectors](where-to-get-data.qmd#spatial-data) to learn more about what a vector is.

```{r}
#| warning: false
#| message: false
library(sf)
library(ozmaps)

aus <- ozmap_states |>
  st_transform(4326) # <1>

aus
```
1. This line transforms the CRS projection of our map to match the CRS projection of ALA data.

Our `starlings` data also contains the state/territory of each occurrence in column `cl22`. We can group by state/territory and summarise the number of occurrences to get an overall count by state/territory.

```{r}
counts_by_state <- starlings |>
  group_by(cl22) |>
  count()

counts_by_state
```

To prepare our data for mapping, we can join `counts_by_state` to `aus` using the state/territory name as our key.

```{r}
aus_counts <- aus |>
  left_join(counts_by_state,
            join_by(NAME == cl22))

aus_counts
```

Now we can use these data to create a choropleth map[^choro].

[^choro]: For more advanced examples of making choropleth maps, check out the ALA Labs articles [counting points in shapefiles](https://labs.ala.org.au/posts/2023-01-12_counting-points-in-shapefiles/) and [using multiple colour scales](https://labs.ala.org.au/posts/2022-05-23-ggnewscale/).

```{r}
ggplot() +
  geom_sf(data = aus_counts,
          aes(fill = n)) + 
  guides(fill = guide_coloursteps(title = "Number of\nObservations")) +
  scale_fill_viridis_c(option = "G") +
  theme_void()
```

The [sf package](https://r-spatial.github.io/sf/) also has specialised functions for spatial joins like [`st_join()`](https://r-spatial.github.io/sf/reference/st_join.html), which can be especially useful for joins using points (e.g., `POINT`) and shapes (e.g., `POLYGON`, `MULTIPOLYGON`). Below is a small example where we use the point location to join with the state/territory. Note that we lose the `POINT` location in favour of the state `MULTIPOLYGON` shape, held in the column `geometry`.

```{r}
# convert record coordinates to sf POINT class
starlings_sf <- starlings |>
  tidyr::drop_na() |>
  st_as_sf(coords = c("decimalLongitude", "decimalLatitude"), 
           crs = 4326)

# join points to aus states that intersect spatially
states_with_species <- st_join(x = aus,
                               y = starlings_sf,
                               join = st_intersects,
                               left = FALSE)

states_with_species |>
  rmarkdown::paged_table() # paged output
```
