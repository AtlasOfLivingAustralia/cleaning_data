---
output: html_document
editor_options: 
  chunk_output_type: console
---

# Taxonomic validation 

<!-- !! see comments at top of cleaning_taxonomy page. -->
!!!! see comments at top of cleaning_taxonomy page.

```{r, setup, include=FALSE}

knitr::opts_chunk$set(
  comment = "",
  fig.width = 6,
  fig.height = 6,
  eval = TRUE,
  echo = TRUE,
  warning = FALSE,
  message = FALSE
)

options(tidyverse.quiet = TRUE)

library(arrow)
library(tidyverse)
library(janitor)
```

```{r, include=FALSE}
# To create data used in this chapter
#
# inverts <- open_dataset("../data_cleaning_workflows/ignore/Curated_Plant_and_Invertebrate_Data_for_Bushfire_Modelling/invertebrate.data.csv", format = "csv")
#
# inverts |>
#   filter(family == "apidae") |>
#   write_parquet(sink = "data/dap/bees.parquet")
#
# Smaller subset of the dataset
# set.seed(5)

# inverts |>
#   collect() |>
#   sample_frac(0.05) |>
#   write_parquet(sink = "data/dap/inverts_subset")


# Plants data with errors
# plants <- read_csv("../data_cleaning_workflows/ignore/Curated_Plant_and_Invertebrate_Data_for_Bushfire_Modelling/vascularplant.data.csv")
#
# plants |>
#   select(record_id:longitude_used) |>
#   rename(latitude = latitude_used,
#          longitude = longitude_used) |>
#   sample_frac(0.05) |>
#   write_parquet("data/dap/plants_subset")
```

```{r loaddata, include=FALSE}
bees <- read_parquet("data/dap/bees.parquet")

plants <- open_dataset("data/dap/plants_subset",
  format = "parquet"
) |> collect()

### Making some fake missing data for inverts in Class column
inverts <- open_dataset("data/dap/inverts_subset") |> collect()

set.seed(5)
tobemissing <- inverts |>
  filter(class == "arachnida") |>
  sample_frac(0.3) |>
  pull(scientific_name) |>
  unique()

inverts <- inverts |>
  mutate(class = ifelse(scientific_name %in% tobemissing, NA, class))
```

Advances in taxonomy, especially in molecular biology has allowed researchers to describe new species more efficiently than ever before [@garraffoni2019integrative]. Modern approaches has also enabled reclassification of organisms that have been incorrectly described in the past. Unfortunately, multiple names (synonyms) for the same organism can arise when taxonomy is not unanimously agreed upon by researchers.

Harmonising taxonomic names is a prevalent and complex issue and so far, no unifying solution has been put forward --- making research with biodiversity data challenging. A potential solution would require pulling together domain knowledge from experts and compiling a database for where taxonomic history for describe species is traceable and linked with published literature.

While there is no perfect solution, some tips, tricks and tools do exist. In this chapter we will go through some of these to clean taxonomic data and deal with synonyms.

### Capitalisation

Normally higher taxonomy are capitalised e.g. Myrtaceae or Aves. Capitalisation errors are usually quick to spot when you print the data object. Alternatively you can try using `str_subset` on columns you expect to have capital letters.

The code below subsets out unique values for the variable `class` that have upper case letters. Notice that no matches are found

```{r}
library(tidyverse)

str_subset(unique(bees$class), "[:upper:]")
```

We can confirm that there are no upper case matches by subsetting unique values that have lower case letters to see what is going on. This shows us that Insecta is inputted entirely in lowercase.

```{r}
str_subset(unique(bees$class), "[:lower:]")
```

We can correct the lower case formatting as below, remember to check the fix before overwriting/removing the erroneous column(s)

```{r}
bees |>
  mutate(class_corrected = str_to_sentence(class)) |>
  select(starts_with("class"))

bees_corrected <- bees |>
  mutate(class_corrected = str_to_sentence(class)) |>
  select(-class) |> # Remove erroreous column
  rename(class = class_corrected) # Rename corrected column as the new 'class'
```

### Seperators

In a taxonomic data, separators such as, spaces and underscore are found in scientific names and are used to delineate the genus and [species name](https://dwc.tdwg.org/terms/#dwc:specificEpithet). While it is personal choice which separator you use, it is good practice to be consistent with your choice. Consistency ensures that unique values of scientific name truly reflects unique species and not due to inconsistencies.

Try `tabyl-ing` your taxonomic columns to check if you have any inconsistencies first

```{r}
library(janitor)

plants |>
  pull(scientific_name) |>
  tabyl() |>
  tibble()
```

Consistent taxonomic formatting may not be an issue if you are downloading data from one single source such as the ALA where scientific names are already formatted consistently e.g. "Moloch horridus". This may not be the case when consolidating data from multiple sources.

Below is code to create an underscore scientific name from one that is separated with a space. Remember to check your changes

```{r}
plants_updated <- plants |>
  mutate(scientific_name_undersc = str_replace_all(scientific_name, " ", "_"))

plants_updated |>
  pull(scientific_name_undersc) |>
  tabyl() |>
  tibble()
```

### Higher taxonomy

Higher taxonomy such as phylum and class may be used to group species for analysis or data visualisations. Its important to check the spelling and formatting of these columns. Its always good to start with some a useful table of counts for each taxonomic level. Keep an eye out for spelling errors, formatting issues and missing data. Note that `NA` in the output represents missing

As an example:

```{r}
library(tidyverse)
library(janitor)

plants |>
  pull(class) |>
  tabyl()

plants |>
  pull(order) |>
  tabyl() |>
  head()

plants |>
  pull(genus) |>
  tabyl() |>
  tail()
```

#### Missing higher taxonomy {.unnumbered}

If you noticed you have missing data in these columns, you can usually back fill this information using your [chosen naming authority](link%20back%20to%20section) or retrieving this information from a living atlas such as the ALA.

The code below demonstrates how you can isolate the `scientific_names` of taxa with missing data and searching for taxonomic information from ALA

<!-- (Example WORK IN PROGRESS, need better fake data, Inverts?) -->

<!-- Seperate chunk where message = TRUE for hits -->

```{r}
library(galah)

# Configure galah to point to Australia node
galah_config(
  atlas = "Australia",
  email = Sys.getenv("ALA_EMAIL")
)

# These are the taxa missing `class` information
to_search <- inverts |>
  filter(is.na(class)) |>
  select(scientific_name) |>
  distinct()

# Reformat scientific_name to scientificName as the latter is the ALA format
backfilled_taxa <- to_search |>
  rename(scientificName = scientific_name) |>
  search_taxa(to_search) |>
  tibble()

backfilled_taxa
```

#### Insufficient taxonomic rank {.unnumbered}

If a record is not identified down to the taxonomic level that needed for the study e.g. species, then the record should be removed.

During your data download, ensure you have requested for the column [`taxonRank`](https://dwc.tdwg.org/terms/#dwc:taxonRank), this variable tells us the lowest level of `scientificName`.

```{r, eval=FALSE}
library(galah)

galah_config(
  email = Sys.getenv("ALA_EMAIL"),
  atlas = "Australia"
)

honeyeaters <- galah_call() |>
  galah_identify("Meliphagidae") |>
  galah_filter(year == 2012 & stateProvince == "New South Wales") |>
  galah_select(group = "basic", taxonRank) |>
  atlas_occurrences()

honeyeaters$taxonRank |> unique()

honeyeaters |> filter(taxonRank == "species")
```

```{r}
library(arrow)
library(dplyr)

# honeyeaters <- galah_call() |>
#   galah_identify("Meliphagidae") |>
#   galah_filter(year == 2012 & stateProvince == "New South Wales") |>
#   galah_select(group = "basic", taxonRank) |>
#   atlas_occurrences()

# write_parquet(honeyeaters, "data/galah/honeyeater")

honeyeaters <- open_dataset("data/galah/honeyeater") |> collect()

honeyeaters$taxonRank |> unique()

honeyeaters |> filter(taxonRank == "species")
```

#### Inconsistent higher taxonomy {.unnumbered}

A great approach to detect inconsistencies in your taxonomic data is to compute counts for each level of taxonomic rank. These counts act as a check for you to verify that the data is in line with your expectation. This is particularly important when combining data from different sources where their taxonomy might vary. If you have detected inconsistencies as we have done below, you will have to correct accordingly, either by consulting a taxonomic expert or a naming authority and ensure this is reported in your methods.

```{r}
# Get counts for every species where they have more than 1 class
plants |>
  select(phylum:species, scientific_name) |>
  distinct() |>
  group_by(species) |>
  summarise(n_class = length(unique(class))) |>
  filter(n_class > 1)

# Get the species that have more than 1 class
inconsistent_taxa <- plants |>
  select(phylum:species, scientific_name) |>
  distinct() |>
  group_by(species) |>
  summarise(n_class = length(unique(class))) |>
  filter(n_class > 1) |>
  pull(species)

# Filter species that have more than 1 class
plants |>
  filter(species %in% inconsistent_taxa) |>
  select(phylum:species, scientific_name) |>
  arrange(species) |>
  distinct()
```

## Taxonomic classification

Taxonomic classification is a complex issue when working with open source
biodiversity data. Data infrastructures have their own taxonomic systems, which
can lead to variations across platforms in hierarchical information.
Furthermore, taxonomic classification is in a state of constant change, and
views may differ within the literature or across authorities (refer back to
[Taxnomy and open source data ](./access_taxonomy.qmd)). As a result, it is
often the case that you will have synonyms, meaning, more than one name for the
same species, in your dataset. Keep in mind that there is no universal solution
to these issues. However you choose to resolve them, we recommend that you
maintain a clear and explicit record of any decisions and changes made with
respect to the data.

### Detecting synonyms

There are several packages available that can be used to query different
taxonomic databases and check for synonyms. 

#### `worrms`  

The [{worrms}](https://docs.ropensci.org/worrms/) is the R interface to the
World Register of Marine Species and has the ability to cross check synonyms
with their database for taxa that has an `AphiaID`. The function will return
synonymous record(s) associated with another different AphiaID. 

```{r}
library(worrms)

marine_sp <- read_csv("data/worms/worms.csv")

marine_sp |>
  slice(7) |>
  pull(AphiaID) |>
  wm_synonyms()
```

#### `taxize` 

<!-- Notes/Andrew: There's no explanation for anything about this list here,
what is it, where is it from etc -->
<!-- Notes/Andrew: Wouldn't it be better to show, or also show, how to do this query with your dataset? -->
The `taxize` package allows users to search over many taxonomic data sources for
hierarchial taxonomic information, such as species names (scientific and
common), to resolve synonymy. The `gnr_resolve()` function matches a supplied
list with up to 118 data sources including GBIF, Catalogue of Life, World
Register of Marine Species and many more. The function scores how well matched
your name is to these sources. 

```{r}
library(taxize)

# Read in a naming authority list
afd <- read_csv("data/naming/afd.csv")
unique(afd$VALID_NAME)

# Resolve names
resolved <- gnr_resolve(unique(afd$VALID_NAME), best_match_only = TRUE)
resolved |> print(n = 50)

# Retrieve synonyms
tsn <- get_tsn(unique(afd$VALID_NAME)[1:5])
synonyms(tsn)


```

## Input from experts

Programmatic solutions for resolving synonymy can only go so far. Seeking
validation from experts is sensible if your goal is to obtain a high quality
species list. Museums or taxonomic societies are extensive sources of knowledge.
Below we have provided a list of some of Australian taxonomic society groups. 

### Australian taxonomic society groups

**VERTEBRATES**

-   Amphibians and reptiles - [Australian Herpetological Society](https://ahs.org.au/)\
-   Birds - [Birdlife Australia](https://www.birdlife.org.au/)\
-   Fish - [Australian Society for Fish Biology](https://www.asfb.org.au/)\
-   Mammals - [The Australian Mammal Society](https://australianmammals.org.au/)

**INVERTEBRATES**

-   Arachnology - [Australasian Arachnological Society](www.australasianarachnologicalsociety.org)\
-   Entomology - [Australian Entomological Society](https://www.austentsoc.org.au/)\
-   Malacology - [The Malacological Society of Australasia](https://www.malsocaus.org/)\
-   Nematology - [Australasian Association of Nematologists](https://www.nematologists.org.au/)

### Global taxonomy

-   [GBIF taxonomic backbone](https://www.gbif.org/dataset/d7dddbf4-2cf0-4f39-9b2a-bb099caae36c) - Uses over 100 different sources
-   [Integrated Taxonomic Information System, ITIS](https://www.itis.gov/) - Authoritative taxonomic information on plants, animals, fungi, and microbes
-   [Catalogue of Life](https://www.catalogueoflife.org/) - Global taxonomic catalogue   
